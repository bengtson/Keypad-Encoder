MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ; Program - keypad.s
                      00003 ;
                      00004 ; Written by Michael Bengtson  11-Aug-2012
                      00005 ;
                      00006 ; This is a prototype program to manage an illuminated encoder to be used in
                      00007 ; the Tack Sa Mycket home we are building.  This is only a prototype since
                      00008 ; the chip used here will likely be different than the chip in the final
                      00009 ; keypad controller.
                      00010 ;
                      00011 ; A timer is set to trigger every 1ms.  This will read the encoder bits and
                      00012 ; check the led pwm status.  LEDs can be set from 0-15 for their intensity.
                      00013 ;
                      00014 ; Need a little state machine to determine the direction of the encoder.
                      00015 
                      00016         list    p=16f1503
                      00017         include <p16F1503.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F1503 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2012 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01413         LIST
                      00018 
                      00019 ;  Set the configuration bits for the chip.  Here's what gets set:
                      00020 ;
                      00021 ;               Bit 13    :   1 : Not used, reads as 1
                      00022 ;               Bit 12    :   1 : Not used, reads as 1.
                      00023 ;               Bit 11    :   0 : Fail Safe Clock Monitor Disabled
                      00024 ;               Bit 10    :   0 : Internal External Switchover Disabled
                      00025 ;               Bit 09-08 :  00 : Brown-Out Detection Disabled
                      00026 ;               Bit  7    :   1 : Data Memory Protection Disabled
                      00027 ;               Bit  6    :   1 : Program Memory Protection Disabled
                      00028 ;               Bit  5    :   1 : MCLR is reset signal.
                      00029 ;               Bit  4    :   0 : Power Timer Enabled
                      00030 ;               Bit  3    :   1 : Watch Dog Timer Enabled
                      00031 ;               Bit 02-00 : 010 : High Speed Oscillator
                      00032 ;
                      00033 ;  Value of the configuration word is: 3F76
                      00034 
                      00035 ;       __CONFIG        _CONFIG1, _CP_OFF & _CCP1_RB0 & _DEBUG_OFF & _WRT_PROTECT_OFF & _CPD_OFF & _LVP_
                            OFF & _BODEN_OFF & _MCLR_ON & _PWRTE_ON & _WDT_OFF & _INTRC_IO
8007   08E0           00036         __CONFIG        _CONFIG1, 0x08e0
8008   0803           00037         __CONFIG        _CONFIG2, 0x0803
                      00038 
                      00039 ;  Define parameters about this device.
  00000001            00040 DEVICE_TYPE_BUTTONS             equ             001H
  00000000            00041 DEVICE_VERSION_MINOR    equ             000H
  00000000            00042 DEVICE_VERSION_MAJOR    equ             000H
                      00043 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044 ;  Define an address for this device.  This will need to be user programmable
                      00045 ;  at some point.
                      00046 
  00000000            00047 DEVICE_ADDRESS          equ     000H
                      00048 
                      00049 ;  Define the locations in RAM necessary.  Valid RAM locations are 20-5F.
                      00050 ;  Only 64 bytes to use them wisely.
                      00051 
  00000020            00052 ram             equ     0x20            ; First address of available RAM
                      00053 
                      00054 ;  Define all the variables used for this code.  These should fit between
                      00055 ;  0x20 and 0x7f.
                      00056         cblock 0x20
                      00057         endc
                      00058 
                      00059 ; ------------------------------------------------------------------------------
                      00060 ;
                      00061 ;  Vector Table
                      00062 ;
                      00063 ;  Setup the reset and interrupt vectors for the chip.
                      00064 
                      00065         org             0x00            ; Set program memory base at reset vector 0x00.
0000   2???           00066         goto    main            ; Go to start of the main program.
                      00067 
                      00068         org             0x04
0004   2???           00069         goto    system_isr                      ; Handle interrupts.
                      00070 
                      00071 ;
                      00072 ; ------------------------------------------------------------------------------
                      00073 
                      00074 ; ------------------------------------------------------------------------------
                      00075 ;
                      00076 ;  System Module
                      00077 ;
                      00078 ;  Here is where we initialize all the functions on the chip.
                      00079 
                      00080         org             0x08
                      00081 
                      00082 ;  Routine - system_init : Initializes the processor.
0008                  00083 system_init
                      00084 
0008   0020           00085         banksel INTCON
0009   138B           00086         bcf             INTCON,GIE              ; Disable all interrupts.
000A   120B           00087         bcf             INTCON,INTE
                      00088 
                      00089     ; Set the clock to 16Mhz.
000B   0021           00090     banksel OSCCON
000C   307A           00091     movlw   0x7A
000D   0099           00092     movwf   OSCCON
                      00093 
                      00094     ;  We are done setting everything up, go to main.
000E   0008           00095         return          ; All done so return.
                      00096 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097 
                      00098 ;  Routine - system_isr : This routine handles the interrupts for the
                      00099 ;  processor.  Simply save state then call each potential interrupt
                      00100 ;  source.
                      00101 
000F                  00102 system_isr
                      00103 
                      00104     ;  Check for an i2c interrupt.
000F   2???           00105     call    i2c_isr
                      00106 
                      00107         ;  Check for a timer interrupt.
0010   2???           00108         call    timer_isr
                      00109 
0011                  00110 system_isr_return
0011   0009           00111         retfie
                      00112 
                      00113 ;  Routine - system_halt : If there are any errors, then the code jumps here
                      00114 ;  to hopefully report the error.
                      00115 
0012                  00116 system_halt
0012   2???           00117     goto    system_halt
                      00118 
                      00119 ;  System Module : END
                      00120 ;
                      00121 ; ------------------------------------------------------------------------------
                      00122 
                      00123 ; ------------------------------------------------------------------------------
                      00124 ;
                      00125 ;  Encoder Module
                      00126 ;
                      00127 ;  This module handles the encoder.  This includes the reading of the encoder,
                      00128 ;  the button and driving the LEDs.  The I/O positions for the encoder are as
                      00129 ;  follows:
                      00130 ;
                      00131 ;       Enc A   Port A4     A before B when CCW, Closed is GND.
                      00132 ;       Enc B   Port A5
                      00133 
  00000004            00134 ENCODER_A_BIT       EQU 4
  00000005            00135 ENCODER_B_BIT       EQU 5
                      00136 
  00000000            00137 ENCODER_DIR_CW      equ 0       ; Clockwise bit 0 set.
  00000001            00138 ENCODER_DIR_CCW     equ 1       ; CCW bit 1 set.
                      00139 
                      00140 ;  Define variables for the encoder module.
                      00141     cblock
  00000020            00142         encoder_state   ;  State for resolving encoder events.
  00000021            00143         encoder_direction   ;  Encoder direction.
  00000022            00144         encoder_position    ;  Position of the encoder 0-23
                      00145     endc
                      00146 
                      00147 ;  Routine - encoder_init : Sets the port direction bits appropriately.
                      00148 
0013                  00149 encoder_init
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150 
                      00151     ; Set encoder and button assignments to inputs.
0013   0021           00152     banksel TRISA
0014   160C           00153     bsf     TRISA,ENCODER_A_BIT
0015   168C           00154     bsf     TRISA,ENCODER_B_BIT
                      00155 
                      00156     ; Turn on weak pull up resistors.
0016   0024           00157     banksel WPUA
0017   160C           00158     bsf     WPUA,ENCODER_A_BIT
0018   168C           00159     bsf     WPUA,ENCODER_B_BIT
                      00160 
                      00161     ; Set variables.
0019   0020           00162     banksel encoder_state
001A   01A0           00163     clrf    encoder_state
001B   1420           00164     bsf     encoder_state,ENCODER_STATE_IDLE
001C   01A2           00165     clrf    encoder_position
                      00166 
                      00167     ; Return to the caller.
001D   0008           00168     return
                      00169 
                      00170 ;  Routine - encoder_tick : Handles code that runs on 1ms boundaries.  This code
                      00171 ;  should generate user events from the encoder and the button.  It should also
                      00172 ;  set the LEDs to the approrpriate on or off state based on the LED setting.
                      00173 ;
                      00174 ;  Encoder State Machine
                      00175 ;
                      00176 ;       Idle        If A true then CW
                      00177 ;                   if B true then CCW
                      00178 ;
                      00179 ;       CW_START    if A false then Idle
                      00180 ;                   if B true then set DIR to CW; next state WAIT
                      00181 ;
                      00182 ;       CCS_START   if B false then Idle
                      00183 ;                   if A true then set DIR to CCW; next state WAIT
                      00184 ;
                      00185 ;       WAIT        if A and B false then Idle
                      00186 
  00000000            00187 ENCODER_STATE_IDLE      equ     0
  00000001            00188 ENCODER_STATE_CW        equ     1
  00000002            00189 ENCODER_STATE_CCW       equ     2
  00000003            00190 ENCODER_STATE_WAIT      equ     3
                      00191 
001E                  00192 encoder_tick
                      00193 
                      00194     ; Go to the encoder state.
001E   0020           00195     banksel encoder_state
                      00196 
001F   1820           00197     btfsc   encoder_state,ENCODER_STATE_IDLE
0020   2???           00198     goto    enc_idle
0021   18A0           00199     btfsc   encoder_state,ENCODER_STATE_CW
0022   2???           00200     goto    enc_cw
0023   1920           00201     btfsc   encoder_state,ENCODER_STATE_CCW
0024   2???           00202     goto    enc_ccw
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0025   19A0           00203     btfsc   encoder_state,ENCODER_STATE_WAIT
0026   2???           00204     goto    enc_wait
0027   2???           00205     goto    system_halt
                      00206 
                      00207     ; Handle the idle state.  Next state is cw or ccw if A or B set.
0028                  00208 enc_idle
0028   1A0C           00209     btfsc   PORTA,ENCODER_A_BIT
0029   2???           00210     goto    enc_idle_check_b
                      00211 
002A   01A0           00212     clrf    encoder_state
002B   14A0           00213     bsf     encoder_state,ENCODER_STATE_CW
002C   2???           00214     goto    enc_read_complete
                      00215 
002D                  00216 enc_idle_check_b
002D   1A8C           00217     btfsc   PORTA,ENCODER_B_BIT
002E   2???           00218     goto    enc_read_complete
                      00219 
002F   01A0           00220     clrf    encoder_state
0030   1520           00221     bsf     encoder_state,ENCODER_STATE_CCW
0031   2???           00222     goto    enc_read_complete
                      00223 
                      00224     ; Handle the CW state.
0032                  00225 enc_cw
0032   1E0C           00226     btfss   PORTA,ENCODER_A_BIT
0033   2???           00227     goto    enc_cw_check_b
                      00228 
0034   01A0           00229     clrf    encoder_state
0035   1420           00230     bsf     encoder_state,ENCODER_STATE_IDLE
0036   2???           00231     goto    enc_read_complete
                      00232 
0037                  00233 enc_cw_check_b
0037   1A8C           00234     btfsc   PORTA,ENCODER_B_BIT
0038   2???           00235     goto    enc_read_complete
                      00236 
0039   01A1           00237     clrf    encoder_direction
003A   1421           00238     bsf     encoder_direction,ENCODER_DIR_CW
003B   01A0           00239     clrf    encoder_state
003C   15A0           00240     bsf     encoder_state,ENCODER_STATE_WAIT
003D   0AA2           00241     incf    encoder_position,F
003E   3018           00242     movlw   0x18
003F   0622           00243     xorwf   encoder_position,W
0040   1903           00244     btfsc   STATUS,Z
0041   01A2           00245     clrf    encoder_position
0042   2???           00246     goto    enc_read_complete
                      00247 
                      00248     ; Handle the CCW state.
0043                  00249 enc_ccw
0043   1E8C           00250     btfss   PORTA,ENCODER_B_BIT
0044   2???           00251     goto    enc_ccw_check_a
                      00252 
0045   01A0           00253     clrf    encoder_state
0046   1420           00254     bsf     encoder_state,ENCODER_STATE_IDLE
0047   2???           00255     goto    enc_read_complete
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00256 
0048                  00257 enc_ccw_check_a
0048   1A0C           00258     btfsc   PORTA,ENCODER_A_BIT
0049   2???           00259     goto    enc_read_complete
                      00260 
004A   01A1           00261     clrf    encoder_direction
004B   14A1           00262     bsf     encoder_direction,ENCODER_DIR_CCW
004C   01A0           00263     clrf    encoder_state
004D   15A0           00264     bsf     encoder_state,ENCODER_STATE_WAIT
                      00265 
004E   03A2           00266     decf    encoder_position,F
004F   1FA2           00267     btfss   encoder_position,7
0050   2???           00268     goto    enc_read_complete
                      00269 
0051   3017           00270     movlw   0x17
0052   00A2           00271     movwf   encoder_position
0053   2???           00272     goto    enc_read_complete
                      00273 
                      00274     ; Handle the WAIT state.
0054                  00275 enc_wait
0054   1E0C           00276     btfss   PORTA,ENCODER_A_BIT
0055   2???           00277     goto    enc_read_complete
                      00278 
0056   1E8C           00279     btfss   PORTA,ENCODER_B_BIT
0057   2???           00280     goto    enc_read_complete
                      00281 
0058   01A0           00282     clrf    encoder_state
0059   1420           00283     bsf     encoder_state,ENCODER_STATE_IDLE
005A   2???           00284     goto    enc_read_complete
                      00285 
005B                  00286 enc_read_complete
                      00287 
005B   0008           00288     return
                      00289 
                      00290 ;  Encoder Module : END
                      00291 ;
                      00292 ; ------------------------------------------------------------------------------
                      00293 
                      00294 
                      00295     ifndef  master
                      00296 ; ------------------------------------------------------------------------------
                      00297 ;
                      00298 ;  I2C Slave Module
                      00299 ;
                      00300 ;  This module provides the driver for the I2C slave interface.  Data can be
                      00301 ;  written to the RGB leds and the status of the button and rotary encoder
                      00302 ;  can be read.  The packet structure for reading and writing is as follows:
                      00303 ;
                      00304 ;       Byte 0 : Packet Type : Byte Count   High 4 bits are the packet type
                      00305 ;                                           while the low 4 bits are the byte
                      00306 ;                                           count (0-15);
                      00307 ;
                      00308 ;   LED Write Packet
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00309 ;
                      00310 ;       Byte 0 : 13H                        Packet type 1 with 3 bytes.
                      00311 ;       Byte 1 : Red Value                  From Master
                      00312 ;       Byte 2 : Green Value                From Master
                      00313 ;       Byte 3 : Blue Value                 From Master
                      00314 ;
                      00315 ;       The led value is as follows:
                      00316 ;
                      00317 ;           Bits 3:0    Intensity of the LED (0-15)
                      00318 ;           Bits 5:4    Flash rate 0=1Hz, 1=2Hz, 2=4Hz, 3=8Hz
                      00319 ;           Bit    6    Phase - 0=Flash In Phase, 1=Flash 180 degrees out of phase.
                      00320 ;           Bit    7    Mode - 0=Steady, 1=Flash
                      00321 ;
                      00322 ;   Encoder Read Packet
                      00323 ;
                      00324 ;       Byte 0 : 21H                        Packet type 2 with 1 byte.
                      00325 ;       Byte 1 : Encoder Value              To Master
                      00326 ;
                      00327 ;       The encoder/button value is as follows:
                      00328 ;
                      00329 ;           Bits 6:0    Current encoder position
                      00330 ;           Bit    7    Button - 0=Not Pressed, 1=Pressed
                      00331 ;
                      00332 ;  All other packet types are reserved.  Note that there is not a way to read
                      00333 ;  the value of an LED or set the encoder position.  This is a raw interface
                      00334 ;  but does have guarenteed delivery of packets.
                      00335 ;
                      00336 ;  Lines used for the bus are:
                      00337 ;
                      00338 ;       SCL     Port C  Bit 0       Clock Line
                      00339 ;       SCD     Port C  Bit 1       Data Line
                      00340 ;
                      00341 ;  These lines need to be set as inputs.
                      00342 ;
                      00343 ;  The interface is tested to run at up to 400KHz.  It can likely run faster but
                      00344 ;  driver overhead starts to be a significant part of packet delivery time.
                      00345 
  00000000            00346 I2C_CLOCK_BIT   EQU     0
  00000001            00347 I2C_DATA_BIT    EQU     1
                      00348 
  00000010            00349 I2C_ADDRESS     EQU     0x10        ;  Address, not byte to write.
                      00350 
                      00351 ;  Bit definitions for state.
  00000000            00352 I2C_STATE_START     EQU     0       ; Waiting for start condition.
  00000001            00353 I2C_STATE_ADDRESS   EQU     1
  00000002            00354 I2C_STATE_TYPE      EQU     2
  00000003            00355 I2C_STATE_LED       EQU     3
  00000004            00356 I2C_STATE_STOP      EQU     4
  00000005            00357 I2C_STATE_ENCODER   EQU     5
                      00358 
                      00359 ;  Define i2c variables.
                      00360     cblock
  00000023            00361         i2c_state           ;  State for running the driver.
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000024            00362         i2c_data_count      ;  Counts bytes of data read.
  00000025            00363         i2c_packet_type     ;  Holds the type of packet.
                      00364     endc
                      00365 
                      00366 ;  Routine - i2c_init : Initializes the serial bus.
                      00367 
005C                  00368 i2c_init
                      00369 
                      00370     ; Set the serial bus lines to inputs.
                      00371 
005C   003E           00372     banksel CLC2CON
005D   0198           00373     clrf    CLC2CON
005E   0029           00374     banksel NCO1CON
005F   019E           00375     clrf    NCO1CON
0060   002C           00376     banksel PWM4CON
0061   019C           00377     clrf    PWM4CON
0062   0022           00378     banksel APFCON
0063   141D           00379     bsf     APFCON,NCO1SEL
                      00380 
0064   0021           00381     banksel TRISC
0065   140E           00382     bsf     TRISC,I2C_CLOCK_BIT
0066   148E           00383     bsf     TRISC,I2C_DATA_BIT
                      00384 
0067   0021           00385     banksel PIE1
0068   1591           00386     bsf     PIE1,SSP1IE     ; Enable SSP Interrupt
0069   1192           00387     bcf     PIE2,BCL1IF     ; Enable Bus Collision Interrupts
                      00388 
                      00389     ; Set the control register
006A   0024           00390     banksel SSP1CON1
006B   0193           00391     clrf    SSP1MSK
006C   0195           00392     clrf    SSP1CON1
006D   0196           00393     clrf    SSP1CON2
006E   0197           00394     clrf    SSP1CON3
006F   1794           00395     bsf     SSP1STAT,SMP
0070   1714           00396     bsf     SSP1STAT,CKE
0071   3020           00397     movlw   I2C_ADDRESS<<1
0072   0092           00398     movwf   SSP1ADD
0073   1015           00399     bcf     SSP1CON1,SSPM0
0074   1495           00400     bsf     SSP1CON1,SSPM1
0075   1515           00401     bsf     SSP1CON1,SSPM2
0076   1595           00402     bsf     SSP1CON1,SSPM3
0077   1695           00403     bsf     SSP1CON1,SSPEN
                      00404 
                      00405     ; Set up the state machine for reading the request for data.
0078   0020           00406     banksel i2c_state
0079   01A3           00407     clrf    i2c_state
007A   1423           00408     bsf     i2c_state,I2C_STATE_START
                      00409 
007B   0008           00410     return
                      00411 
                      00412 ;  Method - i2c_isr : This is called for every interrupt that is generated
                      00413 ;  by the i2c hardware.
                      00414 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007C                  00415 i2c_isr
                      00416 
                      00417     ; See if the i2c interface generated an interrupt.
007C   0020           00418     banksel PIR1
007D   1D91           00419     btfss   PIR1,SSP1IF
007E   2???           00420     goto    i2c_isr_return
                      00421 
                      00422     ; Handle the expected state of the bus.
007F   1823           00423     btfsc   i2c_state,I2C_STATE_START
0080   2???           00424     goto    i2c_state_start
0081   18A3           00425     btfsc   i2c_state,I2C_STATE_ADDRESS
0082   2???           00426     goto    i2c_state_address
0083   1923           00427     btfsc   i2c_state,I2C_STATE_TYPE
0084   2???           00428     goto    i2c_state_type
0085   19A3           00429     btfsc   i2c_state,I2C_STATE_LED
0086   2???           00430     goto    i2c_state_led
0087   1A23           00431     btfsc   i2c_state,I2C_STATE_STOP
0088   2???           00432     goto    i2c_state_stop
                      00433 
                      00434     ; If we get here, we have a state problem. We should reset the chip.
0089   0001           00435     reset
                      00436 
                      00437     ; State - START : We are expecting a start interrupt.  Start bit should
                      00438     ; be set.  If so, clear the interrupt bit and setup for the next state.
008A                  00439 i2c_state_start
                      00440 
                      00441     ; Reset the interrupt.
008A   0020           00442     banksel PIR1
008B   1191           00443     bcf     PIR1,SSP1IF
                      00444 
                      00445     ; Check for the start bit.
008C   0024           00446     banksel SSP1STAT
008D   1994           00447     btfsc   SSP1STAT,S
008E   2???           00448     goto    i2c_state_start_ok
                      00449 
                      00450     ; If there is a problem leave the state the same and exit.  Eventually
                      00451     ; a start packet shoud come along.
008F   2???           00452     goto    i2c_state_unknown_interrupt
                      00453 
                      00454     ; We are good so set the next state to collect the address.
0090                  00455 i2c_state_start_ok
                      00456 
0090   0020           00457     banksel i2c_state
0091   01A3           00458     clrf    i2c_state
0092   14A3           00459     bsf     i2c_state,I2C_STATE_ADDRESS
0093   2???           00460     goto    i2c_isr_return
                      00461 
                      00462     ; We are expecting an address interrupt.  This would indicate that we
                      00463     ; have a matching address.  We should read the address from the buffer
                      00464     ; We should check the D/A bit and the BF bit.
0094                  00465 i2c_state_address
                      00466 
0094   0020           00467     banksel PIR1
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095   1191           00468     bcf     PIR1,SSP1IF
                      00469 
0096   2???           00470     call    i2c_isr_read_buffer
0097   1803           00471     btfsc   STATUS,C
0098   2???           00472     goto    i2c_state_unknown_interrupt
                      00473 
0099   1903           00474     btfsc   STATUS,Z
009A   2???           00475     goto    i2c_state_unknown_interrupt
                      00476 
009B   0020           00477     banksel i2c_state
009C   01A3           00478     clrf    i2c_state
009D   1523           00479     bsf     i2c_state,I2C_STATE_TYPE
009E   2???           00480     goto    i2c_isr_return
                      00481 
                      00482     ; State - TYPE : Read the first byte of data to get the packet type and
                      00483     ; the byte count.
009F                  00484 i2c_state_type
                      00485 
009F   0020           00486     banksel PIR1
00A0   1191           00487     bcf     PIR1,SSP1IF
                      00488 
00A1   2???           00489     call    i2c_isr_read_buffer
00A2   1803           00490     btfsc   STATUS,C
00A3   2???           00491     goto    i2c_state_unknown_interrupt
                      00492 
00A4   1D03           00493     btfss   STATUS,Z
00A5   2???           00494     goto    i2c_state_unknown_interrupt
                      00495 
                      00496     ; Check to see what type of packet we have.
00A6   0020           00497     banksel i2c_state
00A7   39F0           00498     andlw   0xf0
00A8   00A5           00499     movwf   i2c_packet_type
00A9   0EA5           00500     swapf   i2c_packet_type
                      00501 
00AA   0825           00502     movfw   i2c_packet_type
00AB   3A01           00503     xorlw   0x01
00AC   1903           00504     btfsc   STATUS,Z
00AD   2???           00505     goto    i2c_state_type_led
                      00506 
00AE   0825           00507     movfw   i2c_packet_type
00AF   3A02           00508     xorlw   0x02
00B0   1903           00509     btfsc   STATUS,Z
00B1   2???           00510     goto    i2c_state_type_encoder
                      00511 
                      00512     ; Invalid packet type so we should reset to the start state.
00B2   2???           00513 me  goto    me
                      00514 
00B3                  00515 i2c_state_type_led
00B3   0020           00516     banksel i2c_state
00B4   01A3           00517     clrf    i2c_state
00B5   15A3           00518     bsf     i2c_state,I2C_STATE_LED
00B6   01A4           00519     clrf    i2c_data_count
00B7   2???           00520     goto    i2c_isr_return
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00521 
00B8                  00522 i2c_state_type_encoder
00B8   0020           00523     banksel i2c_state
00B9   01A3           00524     clrf    i2c_state
00BA   16A3           00525     bsf     i2c_state,I2C_STATE_ENCODER
00BB   01A4           00526     clrf    i2c_data_count
00BC   2???           00527     goto    i2c_isr_return
                      00528 
                      00529     ; State - ENCODER : Reads the encoder.
00BD                  00530 i2c_state_encoder
00BD   2???           00531 me2  goto    me2
                      00532 
                      00533     ; State - LED : Reads the led data writing it to the led intensity locations.
                      00534 
00BE                  00535 i2c_state_led
                      00536 
                      00537     ; Set up the indirect addressing registers to write the data once we have it.
00BE   0020           00538     banksel i2c_data_count
00BF   3036           00539     movlw   led_intensity
00C0   0084           00540     movwf   FSR0L
00C1   0185           00541     clrf    FSR0H
00C2   0824           00542     movfw   i2c_data_count
00C3   0784           00543     addwf   FSR0L,F
                      00544 
00C4   0020           00545     banksel PIR1
00C5   1191           00546     bcf     PIR1,SSP1IF
                      00547 
00C6   2???           00548     call    i2c_isr_read_buffer
00C7   1803           00549     btfsc   STATUS,C
00C8   2???           00550     goto    i2c_state_unknown_interrupt
                      00551 
00C9   1D03           00552     btfss   STATUS,Z
00CA   2???           00553     goto    i2c_state_unknown_interrupt
                      00554 
00CB   0020           00555     banksel i2c_data_count
00CC   0080           00556     movwf   INDF0
                      00557 
00CD   0AA4           00558     incf    i2c_data_count
00CE   0824           00559     movfw   i2c_data_count
00CF   3A03           00560     xorlw   0x03
00D0   1D03           00561     btfss   STATUS,Z
00D1   2???           00562     goto    i2c_isr_return
                      00563 
                      00564     ; Next state is to wait for the stop bit interrupt.
00D2   01A3           00565     clrf    i2c_state
00D3   1623           00566     bsf     i2c_state,I2C_STATE_STOP
00D4   2???           00567     goto    i2c_isr_return
                      00568 
                      00569     ; State - STOP : We are expecting a stop interrupt.  Stop bit should be set.
                      00570     ; If so, clear the interrupt bit and setup for the start state.
00D5                  00571 i2c_state_stop
00D5   0024           00572     banksel SSP1STAT
00D6   1A14           00573     btfsc   SSP1STAT,P
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D7   2???           00574     goto    i2c_state_stop_ok
                      00575 
00D8   30FE           00576     movlw   0xfe
00D9   2???           00577     goto    i2c_state_unknown_interrupt
                      00578 
00DA                  00579 i2c_state_stop_ok
00DA   0020           00580     banksel PIR1
00DB   1191           00581     bcf     PIR1,SSP1IF
                      00582 
00DC   0020           00583     banksel i2c_state
00DD   01A3           00584     clrf    i2c_state
00DE   1423           00585     bsf     i2c_state,I2C_STATE_START
                      00586 ;    movlw   0x2a
                      00587 ;    call    led_write
00DF   2???           00588     goto    i2c_isr_return
                      00589 
                      00590     ; If we get here, we have some type of problem.  Should probably report
                      00591     ; an error.
00E0                  00592 i2c_state_unknown_interrupt
00E0   2???           00593     call    led_write
00E1   0020           00594     banksel PIR1
00E2   1191           00595     bcf     PIR1,SSP1IF
00E3   0021           00596     banksel PIE1
00E4   1191           00597     bcf     PIE1,SSP1IE     ; Enable SSP Interrupt
00E5   1192           00598     bcf     PIE2,BCL1IF     ; Enable Bus Collision Interrupts
                      00599 ;    goto    system_halt
                      00600 
00E6                  00601 i2c_isr_return
00E6   0008           00602     return;
                      00603 
                      00604 ;  Method - i2c_isr_read_buffer : Reads the data in the slave buffer.  The
                      00605 ;  data is returned in the W register.  Z set if address, clear if data.
                      00606 ;  C clear if ok, set if error.
                      00607 
00E7                  00608 i2c_isr_read_buffer
                      00609 
                      00610     ; Clear the interrupt.  At least for the address byte, this needs to be
                      00611     ; done before the BF but is set.
00E7   0020           00612     banksel PIR1
00E8   1191           00613     bcf     PIR1,SSP1IF
                      00614 
                      00615     ; Make sure there is data to read.
00E9   0024           00616     banksel SSP1STAT
00EA   1814           00617     btfsc   SSP1STAT,BF
00EB   2???           00618     goto    i2c_isr_read_buffer_bf_ok
                      00619 
                      00620     ; No data so set an error.  Z is irrelevant.
00EC   1403           00621     bsf     STATUS,C
00ED   1103           00622     bcf     STATUS,Z
00EE   0008           00623     return
                      00624 
                      00625     ; Get the data.
00EF                  00626 i2c_isr_read_buffer_bf_ok
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00627 
00EF   0024           00628     banksel SSP1BUF
00F0   0811           00629     movfw   SSP1BUF
                      00630 
                      00631     ; Determine if this is an address or data.
00F1   1103           00632     bcf     STATUS,Z
00F2   1A94           00633     btfsc   SSP1STAT,D_NOT_A
00F3   1503           00634     bsf     STATUS,Z
                      00635 
                      00636     ; Return to the caller
00F4   0008           00637     return
                      00638 
                      00639 ;  I2C Module : END
                      00640 ;
                      00641 ; ------------------------------------------------------------------------------
                      00642     endif
                      00643 
                      00644     ifdef   master
                      00645 ; ------------------------------------------------------------------------------
                      00646 ;
                      00647 ;  Master I2C Module
                      00648 ;
                      00649 ;  This module provides the driver for the I2C interface.  The I2C bus is
                      00650 ;  used to send encoder and button presses to the controller and to receive
                      00651 ;  LED commands from the controller.  Encoder and button presses are sent
                      00652 ;  using the Master mode and LED commands are received as a slave.
                      00653 ;
                      00654 ;  Lines used for the bus are:
                      00655 ;
                      00656 ;       SCL     Port C  Bit 0       Clock Line
                      00657 ;       SCD     Port C  Bit 1       Data Line
                      00658 ;
                      00659 ;  These lines need to be set as inputs.
                      00660 ;
                      00661 ;  Timing analysis - The 5 byte packet that sets the RGB leds is being sent
                      00662 ;  from the master and received by the slave in 208us.  This gives more than
                      00663 ;  enough time to read eight rotary encoders at 100Hz.  Assume 42us/byte.  The
                      00664 ;  read encoder packet is 2 bytes * 8 encoders = 16 bytes.  This is .672 ms for
                      00665 ;  a single read.  Max read rate is 1,488 / second.
                      00666 
                      00667 I2C_CLOCK_BIT   EQU     0
                      00668 I2C_DATA_BIT    EQU     1
                      00669 
                      00670 I2C_STATUS_QUEUE_RESERVED   EQU     0
                      00671 I2C_STATUS_READY            EQU     1       ;  Interface is ready to send.
                      00672 I2C_QUEUE_LENGTH     EQU     20
                      00673 
                      00674 ;  Define states.
                      00675 I2C_STATE_READY             EQU     0
                      00676 I2C_STATE_START             EQU     1
                      00677 I2C_STATE_ADDRESS           EQU     2
                      00678 I2C_STATE_DATA              EQU     3
                      00679 I2C_STATE_STOP              EQU     4
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00680 I2C_STATE_STOPPED           EQU     5
                      00681 
                      00682 ;  Define i2c variables.
                      00683     cblock
                      00684         i2c_status          ; Status bits for the driver.
                      00685         i2c_state           ;  State for running the driver.
                      00686         i2c_queue:I2C_QUEUE_LENGTH-1        ; 16 bytes for write queue.
                      00687         i2c_queue_end       ; Last byte in queue.
                      00688         i2c_queue_head            ; Head of queue.
                      00689         i2c_queue_tail            ; Tail of queue.
                      00690         i2c_queue_tail_next       ; Used for queuing data.
                      00691         i2c_queue_save      ; Used to save new byte to add to the queue.
                      00692         i2c_data_count      ; Counts data bytes to write or read.
                      00693         i2c_packet_pointer  ; Points to next byte to send.
                      00694     endc
                      00695 
                      00696 ;  About The Queue : The head pointer will always point to the next byte to
                      00697 ;  be pulled from the queue.  The tail pointer will always point to the next
                      00698 ;  free byte available in the queue.  If H == T, the queue is empty.  Code will
                      00699 ;  never let the H == T if there is data in the queue.  Effectively, this
                      00700 ;  disallows the last byte in the circular queue.  But that's just what it
                      00701 ;  needs to be.
                      00702 
                      00703 ;  Routine - i2c_write_reserve : This reserves the queue for adding a new
                      00704 ;  write command.  Once data has been written, then the queue should be
                      00705 ;  released.  Carry is set if the reserve failed.
                      00706 
                      00707 i2c_queue_reserve
                      00708 
                      00709     banksel i2c_status
                      00710     bsf     STATUS,C
                      00711 
                      00712     btfsc   i2c_status,I2C_STATUS_QUEUE_RESERVED
                      00713     return
                      00714 
                      00715     bsf     i2c_status,I2C_STATUS_QUEUE_RESERVED
                      00716     bcf     STATUS,C
                      00717     movfw   i2c_queue_tail
                      00718     movwf   i2c_queue_tail_next
                      00719 
                      00720     return
                      00721 
                      00722 ;  Routine - i2c_write_release : This releases the queue and sets the new
                      00723 ;  queue tail to include the bytes that have been written to the queue.
                      00724 
                      00725 i2c_queue_release
                      00726 
                      00727     banksel i2c_status
                      00728 
                      00729     movfw   i2c_queue_tail_next
                      00730     movwf   i2c_queue_tail
                      00731     bcf     i2c_status,I2C_STATUS_QUEUE_RESERVED
                      00732 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00733     ; Call start to start the transmission.
                      00734 
                      00735     movlw   0x43
                      00736     call    led_write
                      00737     call    i2c_write_start
                      00738     return
                      00739 
                      00740 ;  Routine - i2c_write_start : Starts writing a packet of data.
                      00741 
                      00742 i2c_write_start
                      00743 
                      00744     banksel i2c_state
                      00745     btfss   i2c_state,I2C_STATE_READY
                      00746     return
                      00747 
                      00748     clrf    i2c_state
                      00749     bsf     i2c_state,I2C_STATE_START
                      00750 
                      00751     banksel SSP1CON2
                      00752     bsf     SSP1CON2,SEN
                      00753     movlw   0xaa
                      00754     call    led_write
                      00755     return
                      00756 
                      00757 ;  Routine - i2c_write_queue : Adds the byte in W to the write queue.  Checks
                      00758 ;  to make sure there is enough memory.  Carry is set if there is not room
                      00759 ;  in the queue, otherwise C is clear.
                      00760 
                      00761 i2c_queue_write
                      00762 
                      00763     banksel i2c_status
                      00764 
                      00765     btfss   i2c_status,I2C_STATUS_QUEUE_RESERVED
                      00766     goto    i2c_queue_write_fail
                      00767 
                      00768     movwf   i2c_queue_save
                      00769     movfw   i2c_queue_tail_next
                      00770     movwf   FSR0L
                      00771     clrf    FSR0H
                      00772     movfw   i2c_queue_save
                      00773     movwf   INDF0
                      00774     incf    i2c_queue_tail_next
                      00775 
                      00776     ; Wrap the tail pointer back to the start of the queue if necessary.
                      00777 
                      00778     movlw   i2c_queue+I2C_QUEUE_LENGTH
                      00779     xorwf   i2c_queue_tail_next,W
                      00780     btfss   STATUS,Z
                      00781     goto    i2c_queue_write_check
                      00782 
                      00783     movlw   i2c_queue
                      00784     movwf   i2c_queue_tail_next
                      00785 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00786     ; See if there was room in the queue to write this byte.  It was ok to
                      00787     ; write the byte to the queue since the queue operational definition will
                      00788     ; always have an extra unused byte.
                      00789 i2c_queue_write_check
                      00790     movfw   i2c_queue_head
                      00791     xorwf   i2c_queue_tail_next,W
                      00792     btfss   STATUS,Z
                      00793     goto    i2c_queue_write_ok
                      00794 
                      00795 i2c_queue_write_fail
                      00796     bcf     i2c_status,I2C_STATUS_QUEUE_RESERVED
                      00797     bsf     STATUS,C
                      00798     return
                      00799 
                      00800 i2c_queue_write_ok
                      00801     bcf     STATUS,C
                      00802     return
                      00803 
                      00804 ;  Routine - i2c_init : Initializes the serial bus.
                      00805 
                      00806 i2c_init
                      00807 
                      00808     ; Set the serial bus lines to inputs.
                      00809 
                      00810     banksel CLC2CON
                      00811     clrf    CLC2CON
                      00812     banksel NCO1CON
                      00813     clrf    NCO1CON
                      00814     banksel PWM4CON
                      00815     clrf    PWM4CON
                      00816     banksel APFCON
                      00817     bsf     APFCON,NCO1SEL
                      00818 
                      00819     banksel TRISC
                      00820     bsf     TRISC,I2C_CLOCK_BIT
                      00821     bsf     TRISC,I2C_DATA_BIT
                      00822 
                      00823     banksel PIE1
                      00824     bsf     PIE1,SSP1IE     ; Enable SSP Interrupt
                      00825     bcf     PIE2,BCL1IF     ; Enable Bus Collision Interrupts
                      00826 
                      00827     ; Set the control register
                      00828     banksel SSP1CON1
                      00829     clrf    SSP1MSK
                      00830     clrf    SSP1CON1
                      00831     clrf    SSP1CON2
                      00832     clrf    SSP1CON3
                      00833     bsf     SSP1STAT,SMP
                      00834     bsf     SSP1STAT,CKE
                      00835 ;    movlw   0x28
                      00836     movlw   0x09            ; Clock 16Mhz/ (4*(9+1)) = 400,000
                      00837     movwf   SSP1ADD
                      00838     bcf     SSP1CON1,SSPM0
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00839     bcf     SSP1CON1,SSPM1
                      00840     bcf     SSP1CON1,SSPM2
                      00841     bsf     SSP1CON1,SSPM3
                      00842     bsf     SSP1CON1,SSPEN
                      00843 
                      00844     ; Initialize the queue.
                      00845     banksel i2c_status
                      00846     movlw   i2c_queue
                      00847     movwf   i2c_queue_head
                      00848     movwf   i2c_queue_tail
                      00849     bcf     i2c_status,I2C_STATUS_QUEUE_RESERVED
                      00850     clrf    i2c_state
                      00851     bsf     i2c_state,I2C_STATE_READY
                      00852 
                      00853     return
                      00854 
                      00855 ;  Method - i2c_isr : This is called for every interrupt that is generated
                      00856 ;  by the i2c hardware.
                      00857 
                      00858 i2c_isr
                      00859 
                      00860     ; See if the i2c interface generated an interrupt.
                      00861     banksel PIR1
                      00862     btfss   PIR1,SSP1IF
                      00863     goto    i2c_isr_return
                      00864 
                      00865     ; Handle the expected state of the bus.
                      00866     btfsc   i2c_state,I2C_STATE_READY
                      00867     goto    i2c_state_ready
                      00868     btfsc   i2c_state,I2C_STATE_START
                      00869     goto    i2c_state_start
                      00870     btfsc   i2c_state,I2C_STATE_ADDRESS
                      00871     goto    i2c_state_address
                      00872     btfsc   i2c_state,I2C_STATE_DATA
                      00873     goto    i2c_state_data
                      00874     btfsc   i2c_state,I2C_STATE_STOP
                      00875     goto    i2c_state_stop
                      00876     btfsc   i2c_state,I2C_STATE_STOPPED
                      00877     goto    i2c_state_stopped
                      00878 
                      00879     ; If we get here, we have a state problem.
                      00880     movlw   0xff
                      00881     call    led_write
                      00882     banksel PIR1
                      00883     bcf     PIR1,SSP1IF
                      00884 
                      00885     goto    i2c_isr_return
                      00886 
                      00887     ; If we get here, we have a state problem.
                      00888     banksel PIR1
                      00889     bcf     PIR1,SSP1IF
                      00890     movlw   0xff
                      00891     call    led_write
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00892     goto    i2c_isr_return
                      00893 
                      00894     ; State - READY : If we get an interrupt in the ready state then I'm not
                      00895     ; sure what to do with it.  Flag it, turn it off and keep going.
                      00896 i2c_state_ready
                      00897     banksel PIR1
                      00898     bcf     PIR1,SSP1IF
                      00899     movlw   0xdd
                      00900     call    led_write
                      00901     goto    i2c_isr_return
                      00902 
                      00903     ; We are expecting a start interrupt.  Start bit should be set.  If so,
                      00904     ; clear the interrupt bit and setup for the next state.
                      00905 i2c_state_start
                      00906 
                      00907     banksel SSP1STAT
                      00908     btfsc   SSP1STAT,S
                      00909     goto    i2c_state_start_ok
                      00910 
                      00911     movlw   0xfe
                      00912     goto    i2c_state_unknown_interrupt
                      00913 
                      00914 i2c_state_start_ok
                      00915     banksel PIR1
                      00916     bcf     PIR1,SSP1IF
                      00917 
                      00918     banksel i2c_state
                      00919     clrf    i2c_state
                      00920     bsf     i2c_state,I2C_STATE_ADDRESS
                      00921 
                      00922     ; Get the address to send the data to.  This is the first byte at the
                      00923     ; head of the queue.
                      00924     banksel i2c_queue_head
                      00925     movfw   i2c_queue_head
                      00926     movwf   i2c_packet_pointer
                      00927     movwf   FSR0L
                      00928     clrf    FSR0H
                      00929     movfw   INDF0
                      00930 
                      00931     banksel SSP1BUF
                      00932     movwf   SSP1BUF
                      00933 
                      00934     banksel i2c_packet_pointer
                      00935     incf    i2c_packet_pointer
                      00936 
                      00937     movlw   i2c_queue+I2C_QUEUE_LENGTH
                      00938     xorwf   i2c_packet_pointer,W
                      00939     btfss   STATUS,Z
                      00940     goto    i2c_isr_return
                      00941 
                      00942     movlw   i2c_queue
                      00943     movwf   i2c_packet_pointer
                      00944 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00945     call    led_write
                      00946     goto    i2c_isr_return
                      00947 
                      00948     ; State - ADDRESS : Verify that the address cycle completed ok.  The ACKSTAT
                      00949     ; bit should be set if we have contacted the slave.
                      00950 
                      00951 i2c_state_address
                      00952 
                      00953     banksel SSP1CON2
                      00954     btfss   SSP1CON2,ACKSTAT
                      00955     goto    i2c_state_address_ok
                      00956 
                      00957     ; We got a negative acknowledge ... probably no slave at this address.
                      00958     movlw   0x54
                      00959     call    led_write
                      00960     banksel PIR1
                      00961     bcf     PIR1,SSP1IF
                      00962     goto    i2c_isr_return
                      00963 
                      00964     ; The address was ok.  Set up to write the packet.
                      00965 i2c_state_address_ok
                      00966     banksel i2c_state
                      00967     clrf    i2c_state
                      00968     bsf     i2c_state,I2C_STATE_DATA
                      00969 
                      00970     ; Get the address to send the data to.  This is the first byte at the
                      00971     ; head of the queue.
                      00972     banksel i2c_queue_head
                      00973     movfw   i2c_packet_pointer
                      00974     movwf   FSR0L
                      00975     clrf    FSR0H
                      00976     movfw   INDF0
                      00977 
                      00978     banksel SSP1BUF         ;  Write the packet type/length byte.
                      00979     movwf   SSP1BUF
                      00980 
                      00981     banksel i2c_data_count
                      00982     andlw   0x0F            ;  Get the byte count.
                      00983     movwf   i2c_data_count
                      00984 
                      00985     banksel PIR1
                      00986     bcf     PIR1,SSP1IF
                      00987 
                      00988     banksel i2c_packet_pointer
                      00989     incf    i2c_packet_pointer
                      00990 
                      00991     movlw   i2c_queue+I2C_QUEUE_LENGTH
                      00992     xorwf   i2c_packet_pointer,W
                      00993     btfss   STATUS,Z
                      00994     goto    i2c_isr_return
                      00995 
                      00996     movlw   i2c_queue
                      00997     movwf   i2c_packet_pointer
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00998     goto    i2c_isr_return
                      00999 
                      01000     ; State - DATA : Check to see if the data was sent ok.  Then write the next
                      01001     ; byte of data if there is another to write.
                      01002 
                      01003 i2c_state_data
                      01004 
                      01005     banksel PIR1
                      01006     bcf     PIR1,SSP1IF
                      01007 
                      01008     banksel SSP1CON2
                      01009     btfss   SSP1CON2,ACKSTAT
                      01010     goto    i2c_state_data_ok
                      01011 
                      01012     ; We got a negative acknowledge ... probably no slave at this address.
                      01013     movlw   0x56
                      01014     call    led_write
                      01015     goto    i2c_isr_return
                      01016 
                      01017     ; We need to get and send the next byte.
                      01018 
                      01019 i2c_state_data_ok
                      01020 
                      01021     ; Get the address to send the data to.  This is the first byte at the
                      01022     ; head of the queue.
                      01023     banksel i2c_queue_head
                      01024     movfw   i2c_packet_pointer
                      01025     movwf   FSR0L
                      01026     clrf    FSR0H
                      01027     movfw   INDF0
                      01028 
                      01029     banksel SSP1BUF         ;  Write the packet type/length byte.
                      01030     movwf   SSP1BUF
                      01031 
                      01032     banksel i2c_packet_pointer
                      01033     incf    i2c_packet_pointer
                      01034 
                      01035     movlw   i2c_queue+I2C_QUEUE_LENGTH
                      01036     xorwf   i2c_packet_pointer,W
                      01037     btfss   STATUS,Z
                      01038     goto    i2c_state_data_loop
                      01039 
                      01040     movlw   i2c_queue
                      01041     movwf   i2c_packet_pointer
                      01042 
                      01043 i2c_state_data_loop
                      01044     banksel i2c_data_count
                      01045     decfsz  i2c_data_count
                      01046     goto    i2c_isr_return
                      01047 
                      01048     clrf    i2c_state
                      01049     bsf     i2c_state,I2C_STATE_STOP
                      01050 
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01051     goto    i2c_isr_return
                      01052 
                      01053     ; State - STOP : This sets the stop condition.
                      01054 i2c_state_stop
                      01055     banksel PIR1
                      01056     bcf     PIR1,SSP1IF
                      01057 
                      01058     banksel SSP1CON2
                      01059     btfss   SSP1CON2,ACKSTAT
                      01060     goto    i2c_state_stop_ok
                      01061 
                      01062     ; We got a negative acknowledge ... probably no slave at this address.
                      01063     movlw   0x56
                      01064     call    led_write
                      01065     goto    i2c_isr_return
                      01066 
                      01067     ; Command the stop bit.
                      01068 i2c_state_stop_ok
                      01069     banksel SSP1CON2
                      01070     bsf     SSP1CON2,PEN
                      01071 
                      01072     banksel i2c_state
                      01073     clrf    i2c_state
                      01074     bsf     i2c_state,I2C_STATE_STOPPED
                      01075     goto    i2c_isr_return
                      01076 
                      01077     ; State - STOPPED : Make sure we get the stop bit.
                      01078 i2c_state_stopped
                      01079 
                      01080     banksel PIR1
                      01081     bcf     PIR1,SSP1IF
                      01082 
                      01083     banksel SSP1STAT
                      01084     btfsc   SSP1STAT,P
                      01085     goto    i2c_state_stopped_ok
                      01086 
                      01087 ;    movlw   0xf2
                      01088     movfw   SSP1STAT
                      01089     goto    i2c_state_unknown_interrupt
                      01090 
                      01091 i2c_state_stopped_ok
                      01092 ; !!! Update head/tail and possibly start another write.
                      01093     banksel i2c_packet_pointer
                      01094     movfw   i2c_packet_pointer
                      01095     movwf   i2c_queue_head
                      01096     xorwf   i2c_queue_tail,W
                      01097     btfss   STATUS,Z
                      01098     goto    i2c_isr_new_start
                      01099 
                      01100     ; We don't have anything else in the queue so stop.
                      01101     clrf    i2c_state
                      01102     bsf     i2c_state,I2C_STATE_READY
                      01103 ;    movlw   0x33
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01104 ;    call    led_write
                      01105     goto    i2c_isr_return
                      01106 
                      01107 i2c_isr_new_start
                      01108     clrf    i2c_state
                      01109     bsf     i2c_state,I2C_STATE_READY
                      01110     call    i2c_write_start
                      01111     goto    i2c_isr_return
                      01112 
                      01113     ; If we get here, we have some type of problem.  Should probably report
                      01114     ; an error.
                      01115 i2c_state_unknown_interrupt
                      01116     call    led_write
                      01117     banksel PIR1
                      01118     bcf     PIR1,SSP1IF
                      01119     banksel PIE1
                      01120     bcf     PIE1,SSP1IE     ; Disable SSP Interrupt
                      01121     bcf     PIE2,BCL1IF     ; Disable Bus Collision Interrupts
                      01122 
                      01123 i2c_isr_return
                      01124     return;
                      01125 
                      01126 ;  Method - i2c_write : This starts a write of the specified byte to the
                      01127 ;  slave address specified.
                      01128 
                      01129 ;  I2C Module : END
                      01130 ;
                      01131 ; ------------------------------------------------------------------------------
                      01132     endif
                      01133 
                      01134 ; ------------------------------------------------------------------------------
                      01135 ;
                      01136 ;  Button Module
                      01137 ;
                      01138 ;  This module handles the button.  It handles initialization and the process
                      01139 ;  of determining it's state.  The button sends raw state information which 
                      01140 ;  includes the following events:
                      01141 ;
                      01142 ;       Pressed
                      01143 ;       Released
                      01144 ;
                      01145 ;  Additionally, the events are time stamped.  Time stamps are necessary to
                      01146 ;  determine high level events such as clicked, double clicked.
                      01147 ;
                      01148 ;  The I/O position for the button is:
                      01149 ;
                      01150 ;       Button  Port B5     Closed is Vcc
                      01151 
  00000002            01152 BUTTON_BIT  EQU 2       ; Port A bit 2.
                      01153 
                      01154 ;  Define variables for the button module.
                      01155     cblock
  00000026            01156         button_state        ;  State for resolving button events.
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000027            01157         button_wait         ;  8ms counter for debouncing.
                      01158     endc
                      01159 
                      01160 ;  Routine - button_init : Sets the port direction bits appropriately.
                      01161 
00F5                  01162 button_init
                      01163 
                      01164     ; Set encoder and button assignments to inputs.
00F5   0021           01165     banksel TRISA
00F6   150C           01166     bsf     TRISA,BUTTON_BIT
                      01167 
                      01168     ; Set variables.
00F7   0020           01169     banksel button_state
00F8   01A6           01170     clrf    button_state
00F9   1426           01171     bsf     button_state,BUTTON_STATE_IDLE
00FA   01A7           01172     clrf    button_wait
                      01173 
                      01174     ; Return to the caller.
00FB   0008           01175     return
                      01176 
                      01177 ;  Routine - button_tick : Handles code that runs on 1ms boundaries.  This code
                      01178 ;  should generate user events from the button.
                      01179 ;
                      01180 ;  Button State Machine
                      01181 ;
                      01182 ;       IDLE            Button is not pressed.
                      01183 ;                       If press detected next state is WAIT_PRESSED
                      01184 ;
                      01185 ;       WAIT_PRESSED    Wait for 8ms before press is confirmed.
                      01186 ;                       If button not pressed, next state is IDLE
                      01187 ;                       If button pressed for 8ms, next state is PRESSED.
                      01188 ;
                      01189 ;       PRESSED         If button not pressed, next state is WAIT_RELEASE
                      01190 ;
                      01191 ;       WAIT_RELEASED   Wait for release to be confirmed.
                      01192 ;                       If button is pressed, goto PRESSED.
                      01193 ;                       If button not pressed for 8ms, goto IDLE.
                      01194 
  00000000            01195 BUTTON_STATE_IDLE               equ     0
  00000001            01196 BUTTON_STATE_WAIT_PRESSED       equ     1
  00000002            01197 BUTTON_STATE_PRESSED           equ     2
  00000003            01198 BUTTON_STATE_WAIT_RELEASED     equ     3
                      01199 
00FC                  01200 button_tick
                      01201 
                      01202     ; Go to the encoder state.
00FC   0020           01203     banksel button_state
                      01204 
00FD   1826           01205     btfsc   button_state,BUTTON_STATE_IDLE
00FE   2???           01206     goto    button_idle
00FF   18A6           01207     btfsc   button_state,BUTTON_STATE_WAIT_PRESSED
0100   2???           01208     goto    button_wait_pressed
0101   1926           01209     btfsc   button_state,BUTTON_STATE_PRESSED
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0102   2???           01210     goto    button_pressed
0103   19A6           01211     btfsc   button_state,BUTTON_STATE_WAIT_RELEASED
0104   2???           01212     goto    button_wait_released
0105   2???           01213     goto    system_halt
                      01214 
                      01215     ; Handle the idle state.  Next state is wait pressed if button is pressed.
0106                  01216 button_idle
0106   1D0C           01217     btfss   PORTA,BUTTON_BIT
0107   2???           01218     goto    button_read_complete
                      01219 
0108   01A6           01220     clrf    button_state
0109   14A6           01221     bsf     button_state,BUTTON_STATE_WAIT_PRESSED
010A   01A7           01222     clrf    button_wait
010B   2???           01223     goto    button_read_complete
                      01224 
                      01225     ; Wait 8ms for button to stabilize.
010C                  01226 button_wait_pressed
                      01227 
010C   1D0C           01228     btfss   PORTA,BUTTON_BIT
010D   2???           01229     goto    button_press_bounce
                      01230 
010E   0AA7           01231     incf    button_wait
010F   1DA7           01232     btfss   button_wait,3
0110   2???           01233     goto    button_read_complete
                      01234 
0111   01A6           01235     clrf    button_state
0112   1526           01236     bsf     button_state,BUTTON_STATE_PRESSED
0113   2???           01237     goto    button_read_complete
                      01238 
0114                  01239 button_press_bounce
                      01240 
0114   01A6           01241     clrf    button_state
0115   1426           01242     bsf     button_state,BUTTON_STATE_IDLE
0116   2???           01243     goto    button_read_complete
                      01244 
                      01245     ; Wait for the button to be released.
0117                  01246 button_pressed
                      01247 
0117   190C           01248     btfsc   PORTA,BUTTON_BIT
0118   2???           01249     goto    button_read_complete
                      01250 
0119   01A6           01251     clrf    button_state
011A   15A6           01252     bsf     button_state,BUTTON_STATE_WAIT_RELEASED
011B   2???           01253     goto    button_read_complete
                      01254 
                      01255     ; Debounce the button release.
011C                  01256 button_wait_released
                      01257 
011C   190C           01258     btfsc   PORTA,BUTTON_BIT
011D   2???           01259     goto    button_release_bounce
                      01260 
011E   0AA7           01261     incf    button_wait
011F   1DA7           01262     btfss   button_wait,3
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0120   2???           01263     goto    button_read_complete
                      01264 
0121   01A6           01265     clrf    button_state
0122   1426           01266     bsf     button_state,BUTTON_STATE_IDLE
0123   2???           01267     goto    button_read_complete
                      01268 
0124                  01269 button_release_bounce
                      01270 
0124   01A6           01271     clrf    button_state
0125   1526           01272     bsf     button_state,BUTTON_STATE_PRESSED
0126   2???           01273     goto    button_read_complete
                      01274 
0127                  01275 button_read_complete
                      01276 
0127   0008           01277     return
                      01278 
                      01279 ;  Button Module : END
                      01280 ;
                      01281 ; ------------------------------------------------------------------------------
                      01282 
                      01283 ; ------------------------------------------------------------------------------
                      01284 ;
                      01285 ;  Timer 1 Module
                      01286 ;
                      01287 ;  This module handles the timing for buttons and led's.  The timer will be set
                      01288 ;  to interrupt every 2000 ticks.  This provides an interrupt every millisecond.
                      01289 ;  This will be the LED update rate.  With 16 brightness levels, this is
                      01290 
                      01291 ;  Define variables for the timer 1 module.
                      01292         cblock
  00000028            01293                 mstimerl        ;  Low byte of millisecond timer.
  00000029            01294                 mstimerh        ;  High byte of millisceond timer.
  0000002A            01295         mstimertick ;  Bit 0 set if ms tick code should run.
                      01296         endc
                      01297 
                      01298 ;  The reload value is 65536-2000 = 0FB30H.  This will cause an interrupt on
                      01299 ;  overflow every 1ms.
  00000080            01300 timer_reload_low        equ             080H
  000000C1            01301 timer_reload_high       equ             0c1H
                      01302 
                      01303 ;  Routine - timer_init : Set up the timer to give us an interrupt every 1ms.
                      01304 ;  The isr code for this must be VERY lightweight.
                      01305 
0128                  01306 timer_init
                      01307 
0128   0020           01308     banksel T1CON
0129   1718           01309     bsf     T1CON,TMR1CS0    ; Select internal clock.  System Clock.
012A   1398           01310     bcf     T1CON,TMR1CS1
012B   1518           01311     bsf     T1CON,NOT_T1SYNC  ; Not required for internal clock.
012C   1218           01312     bcf     T1CON,T1CKPS0   ; Prescaler 1:1
012D   1298           01313     bcf     T1CON,T1CKPS1
                      01314 
012E   0020           01315     banksel T1GCON
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012F   1399           01316     bcf     T1GCON,TMR1GE
                      01317 
0130   01A8           01318         clrf    mstimerl
0131   01A9           01319         clrf    mstimerh
                      01320 
0132   30C1           01321     movlw   timer_reload_high
0133   0097           01322     movwf   TMR1H
0134   3080           01323     movlw   timer_reload_low
0135   0096           01324     movwf   TMR1L
                      01325 
0136   1011           01326         bcf             PIR1,TMR1IF                             ;  Clear any pending interrupt.
0137   0021           01327         banksel PIE1
0138   1411           01328         bsf             PIE1,TMR1IE                             ;  Enable the interrupts
0139   0020           01329         banksel T1CON
013A   1418           01330         bsf             T1CON,TMR1ON                    ;  Start the timer.
013B   0008           01331         return
                      01332 
                      01333 
                      01334 ;  Routine - timer_isr : This is called from the interrupt routine if a timer1
                      01335 ;  interrupt is detected.
                      01336 
013C                  01337 timer_isr
                      01338 
013C   0020           01339         banksel PIR1
013D   1C11           01340         btfss   PIR1,TMR1IF                             ;  Check for timer 1 interrupt.
013E   2???           01341         goto    timer_isr_return                ;  If not, return.
                      01342 
013F   1018           01343         bcf             T1CON,TMR1ON                    ;  Turn off the timer.
                      01344 
0140   0AA8           01345         incf    mstimerl,F                              ;  Increment mstimer.
0141   1903           01346         btfsc   STATUS,Z
0142   0AA9           01347         incf    mstimerh,F
0143   3080           01348         movlw   timer_reload_low                ;  Get low timer value.
0144   0096           01349         movwf   TMR1L                                   ;  Set low byte.
0145   30C1           01350         movlw   timer_reload_high               ;  Get high timer value.
0146   0097           01351         movwf   TMR1H                                   ;  Set high byte.
                      01352 
0147   1011           01353         bcf             PIR1,TMR1IF                             ;  Clear any pending interrupt.
0148   1418           01354         bsf             T1CON,TMR1ON                    ;  Turn timer back on.
                      01355 
0149   142A           01356     bsf     mstimertick,0           ;  Set bit to run tick code.
                      01357 
                      01358 ;    call    tick_list               ;  Handle everything that needs a tick.
                      01359 
014A                  01360 timer_isr_return
014A   0008           01361         return
                      01362 
                      01363 ;  Timer Module : END
                      01364 ;
                      01365 ; ------------------------------------------------------------------------------
                      01366 
                      01367 ; ------------------------------------------------------------------------------
                      01368 ;
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01369 ;  LED Module
                      01370 ;
                      01371 ;  This module handles the interaction with the LEDs.
                      01372 ;
                      01373 ;  Definitions
                      01374 ;
                      01375 ;       LED R   Port C3     GND is On
                      01376 ;       LED G   Port C4
                      01377 ;       LED B   Port C5
                      01378 
  00000003            01379 LED_R_BIT   EQU 3
  00000004            01380 LED_G_BIT   EQU 4
  00000005            01381 LED_B_BIT   EQU 5
                      01382 
                      01383 ;  Define variables for the led module.
                      01384         cblock
  0000002B            01385                 led_count                       ;  Counter for loading
  0000002C            01386                 led_shift                       ;  Temp locations for shifting data.
  0000002D            01387                 led_flash                       ;  Flash values.
  0000002E            01388         led_tmp             ;  Temp location for some math.
  0000002F            01389         led_value           ;  Place to hold the bits to set at the end.
  00000030            01390         led_write_value     ;  Value to write.
  00000031            01391         led_write_state     ;  State for writing the 8 bit value.
  00000032            01392         led_write_delayl    ;  Delay used in write state machine.
  00000033            01393         led_write_delayh
  00000034            01394         led_write_next      ;  Used to set a next state.
  00000035            01395         led_write_mask      ;  Bit mask to determine next bit to write.
  00000036            01396         led_intensity:3     ;  RGB values.
                      01397         endc
                      01398 
                      01399 ;  Routine - led_init : Setup the processor for writing to the LED registers.
014B                  01400 led_init
                      01401 
                      01402         ;  Set up the bits to control the LEDs.
014B   0022           01403         banksel LATC
014C   118E           01404     bcf     LATC,LED_R_BIT
014D   120E           01405     bcf     LATC,LED_G_BIT
014E   128E           01406     bcf     LATC,LED_B_BIT
014F   0021           01407     banksel TRISC
0150   118E           01408         bcf             TRISC,LED_R_BIT
0151   120E           01409     bcf     TRISC,LED_G_BIT
0152   128E           01410     bcf     TRISC,LED_B_BIT
                      01411 
                      01412     ; Clear the led's.
0153   0020           01413     banksel led_intensity
0154   01B6           01414     clrf    led_intensity+0;
0155   01B7           01415     clrf    led_intensity+1;
0156   01B8           01416     clrf    led_intensity+2;
                      01417 
                      01418         ;  That's it.
0157   0008           01419         return
                      01420 
                      01421 ;  Routine - led_set_intensity : This routine checks the expected state of all the
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01422 ;  leds and sets their next value into the 3 led locations.
                      01423 ;
                      01424 ;  The intensity is determined by the following:
                      01425 ;
                      01426 ;               led intensity byte : mpffiiii
                      01427 ;
                      01428 ;  When m = 0 then i is the intensity of the led from 0-15.  0 is off and 15 is almost
                      01429 ;                                       always on.
                      01430 ;  When m = 1 then the following applies:
                      01431 ;                       f=0 : flash at 1 Hz, f=1 : flash at 2 Hz, f=2 flash at 4 Hz, f=3 8 Hz
                      01432 ;  When p = 0 then the led will flash in phase.
                      01433 ;  When p = 1 then the led will flash out of phase.
                      01434 ;  The phase bit lets an led be set up to flash red then green for instance.
                      01435 
0158                  01436 led_tick
                      01437 
0158   0020           01438         banksel mstimerl                                        ;  This all happens in bank 0.
                      01439 
                      01440         ; The flash is done by overlaying bits 9-6 of the mstimer.  Two bits are
                      01441     ; in mstimerl and two in mstimerh.  Put all 4 bits into the low nibble of
                      01442     ; variable led_flash.  Bit 0 will be flashing at ~8Hz while bit 3 will be
                      01443     ; flashing at ~1Hz.  Where the bit is 1, it should always turn the light
                      01444     ; off.  When it is a 0, then leave the intensity setting.
                      01445 
0159   0828           01446         movfw   mstimerl
015A   00AC           01447         movwf   led_shift
015B   0829           01448         movfw   mstimerh
015C   00AD           01449         movwf   led_flash
015D   3903           01450     andlw   0x03
015E   1003           01451     bcf     STATUS,C
015F   0DAC           01452         rlf             led_shift,F
0160   0DAD           01453         rlf             led_flash,F
0161   0DAC           01454         rlf             led_shift,F
0162   0DAD           01455         rlf             led_flash,F     ;  led_flash now has the 4 flash bits.
                      01456 
                      01457     ; The variable led_value will the led BGR values in bits 2:0.  The bits are
                      01458     ; shifted in as each LED state is determined.  Start with Blue.  But clear
                      01459     ; the variable to start.
                      01460 
0163   01AF           01461     clrf    led_value       ;  Used to hold the values of the bits.
                      01462 
                      01463     ; Loop through each of the led intensity values, so that each led can be set.
                      01464 
0164   3003           01465         movlw   3                   ; Loop counter for setting each led.
0165   00AB           01466         movwf   led_count           ; Save it in count.
0166   3038           01467         movlw   led_intensity+3-1       ; Set the indirect memory pointer.
0167   0084           01468         movwf   FSR0L
0168   0185           01469     clrf    FSR0H
                      01470 ;       bcf             STATUS,IRP              ;  Led intensity bytes locations are not higher than 255
                            .
                      01471 
                      01472     ; Here is the loop that will set the intensity of each of the three LEDs.
                      01473     ; The blue LED is done first, then green and last red.  The intensity is
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01474     ; determined by the low 4 bits of the led's command byte.
                      01475 
0169                  01476 led_set_intensity_loop
                      01477 
0169   0828           01478         movfw   mstimerl                ; Get low byte of the millisecond timer.
016A   390F           01479         andlw   00f                             ; Clear it.
016B   00AE           01480         movwf   led_tmp                 ; Save it.
016C   0800           01481         movfw   INDF0                   ; Get the intensity.
016D   390F           01482         andlw   00f                             ; Clear all other bits.
016E   022E           01483         subwf   led_tmp,W               ; Subtract mstimer-intensity.
                      01484 
                      01485         ; If carry is set, LED should be off.  Rotate the value into the value
                      01486     ; varaible.
                      01487 
016F   0DAF           01488     rlf     led_value       ; Move the value of this led into the holding location.
                      01489 
                      01490     ; Now check to see if this led should be flashing.  The mode value should be
                      01491     ; 1 in bits 5:4 if the led should be flashing.
                      01492 
0170   0800           01493         movfw   INDF0            ; Get the led command byte.
0171   3980           01494         andlw   0x80            ; Get mode bit.
0172   3A80           01495     xorlw   0x80            ; Check to see if the mode is 'flash'.
0173   1D03           01496     btfss   STATUS,Z        ; Skip if we should flash.
0174   2???           01497     goto    led_loop_check  ; We are not flashing so check for end of looping.
                      01498 
                      01499     ; We need to isolate the correct led_flash bit based on the flash bits in
                      01500     ; the led command byte.  Trickery here to do some shifts instead of looping
                      01501     ; on a count to get the bit out the end.
                      01502 
0175   082D           01503     movfw   led_flash       ; Get the flash values of which we will select one.
0176   00AC           01504     movwf   led_shift       ; These will get shifted so make a copy.
0177   0EAC           01505     swapf   led_shift       ; Put the 4 bits in the high nibble for shifting left.
0178   0800           01506     movfw   INDF0            ; Get the led command byte.
0179   00AE           01507     movwf   led_tmp         ; The led_tmp variable has the command byte.
017A   1A2E           01508     btfsc   led_tmp,4       ; See if the low flash select bit is set.
017B   0DAC           01509     rlf     led_shift,f     ; Shift the flash value left one position.
017C   1EAE           01510     btfss   led_tmp,5       ; See if the high flash select bit is set.
017D   2???           01511     goto    led_set_flash   ; If bit is clear, go set the led for flashing.
017E   0DAC           01512     rlf     led_shift,f     ; Shift two places.
017F   0DAC           01513     rlf     led_shift,f     ; Now important bit is in position 7.
                      01514 
0180                  01515 led_set_flash
                      01516 
0180   0800           01517     movfw   INDF0
0181   0CAC           01518     rrf     led_shift,f
0182   06AC           01519     xorwf   led_shift,f
0183   0DAC           01520     rlf     led_shift,f
                      01521 
0184   0DAC           01522     rlf     led_shift,f     ; Now the flash control bit is in the carry.
0185   1803           01523     btfsc   STATUS,C        ; If the bit is clear, we let the intensity alone.
0186   142F           01524     bsf     led_value,0     ; If the bit is set, we turn off the led to make it flash.
                      01525 
                      01526         ;  Check the loop to see if we need to do the next led.
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01527 
0187                  01528 led_loop_check
                      01529 
0187   0384           01530         decf    FSR0L,F                   ; Point to the next led to check.
0188   0BAB           01531         decfsz  led_count,F             ; Loop through all 3 leds.
0189   2???           01532         goto    led_set_intensity_loop  ; Go back to do the next led.
                      01533 
                      01534     ; Write the led value bits to the output pins on port A.  The led I/O bits
                      01535     ; are two bits higher than the values that have been shifted into the
                      01536     ; led_value variable.
                      01537 
018A   1003           01538     bcf     STATUS,C
018B   0DAF           01539     rlf     led_value
018C   0DAF           01540     rlf     led_value
018D   0DAF           01541     rlf     led_value
018E   082F           01542     movfw   led_value
018F   0022           01543     banksel LATC
0190   008E           01544     movwf   LATC
                      01545 
                      01546     ; We are done handling the led intensities. Return to the caller.
                      01547 
0191                  01548 led_tick_return
                      01549 
0191   0008           01550         return                          ; Return to the caller.
                      01551 
                      01552 ;  Method - led_write : Starts the writing of a value to the led.  Value
                      01553 ;  to write should be in the W register.
                      01554 
0192                  01555 led_write
                      01556 
0192   0020           01557     banksel led_write_state
0193   00B0           01558     movwf   led_write_value
0194   01B1           01559     clrf    led_write_state
0195   1431           01560     bsf     led_write_state,LED_WRITE_STATE_START
0196   0008           01561     return
                      01562 
0197                  01563 led_write_off
0197   0020           01564     banksel led_write_state
0198   01B1           01565     clrf    led_write_state
0199   0008           01566     return
                      01567 
                      01568 ;  Method - led_write_tick : Strobes the led such that an 8-bit value can be
                      01569 ;  read.
                      01570 ;
                      01571 ;   led_value   Holds the 8 bit value to write to the led.
                      01572 ;   led_state   Holds the state needed to write the value.
                      01573 ;   led_delay   Holds a delay for the current led setting.
                      01574 ;
                      01575 ;  State definitions:
                      01576 ;
                      01577 
  00000000            01578 LED_WRITE_STATE_START   EQU     0       ; Starts sequence.  Next state clock
  00000001            01579 LED_WRITE_STATE_DELAY   EQU     1       ; Delays specified ms then to next state.
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000002            01580 LED_WRITE_STATE_DELAY2  EQU     2       ; A second delay state which has led's off.
  00000003            01581 LED_WRITE_STATE_BIT     EQU     3       ; Write the next bit in the value.
  00000004            01582 LED_WRITE_STATE_END     EQU     4       ; Check for end of bits to write.
                      01583 
019A                  01584 led_write_tick
                      01585 
019A   0020           01586     banksel led_write_state
019B   08B1           01587     movf    led_write_state
019C   1903           01588     btfsc   STATUS,Z
019D   2???           01589     goto    led_write_tick_return      ; Not writing value so return
                      01590 
                      01591     ;  Find the state that we need to use.
019E   1831           01592     btfsc   led_write_state,LED_WRITE_STATE_START
019F   2???           01593     goto    led_write_state_start
01A0   18B1           01594     btfsc   led_write_state,LED_WRITE_STATE_DELAY
01A1   2???           01595     goto    led_write_state_delay
01A2   1931           01596     btfsc   led_write_state,LED_WRITE_STATE_DELAY2
01A3   2???           01597     goto    led_write_state_delay2
01A4   19B1           01598     btfsc   led_write_state,LED_WRITE_STATE_BIT
01A5   2???           01599     goto    led_write_state_bit
01A6   1A31           01600     btfsc   led_write_state,LED_WRITE_STATE_END
01A7   2???           01601     goto    led_write_state_end
                      01602 
01A8   01B1           01603     clrf    led_write_state
01A9   2???           01604     goto    led_write_tick_return
                      01605 
                      01606     ;  Start state turns on the blue led and sets the delay for 250ms.
                      01607 
01AA                  01608 led_write_state_start
                      01609 
01AA   3003           01610     movlw   0x03
01AB   00B3           01611     movwf   led_write_delayh
01AC   01B2           01612     clrf    led_write_delayl
01AD   3080           01613     movlw   0x80
01AE   00B5           01614     movwf   led_write_mask
01AF   01B4           01615     clrf    led_write_next
01B0   15B4           01616     bsf     led_write_next,LED_WRITE_STATE_BIT
01B1   01B1           01617     clrf    led_write_state
01B2   14B1           01618     bsf     led_write_state,LED_WRITE_STATE_DELAY
01B3   01B6           01619     clrf    led_intensity
01B4   01B7           01620     clrf    led_intensity+1
01B5   300F           01621     movlw   0x0f
01B6   00B8           01622     movwf   led_intensity+2
01B7   2???           01623     goto    led_write_tick_return
                      01624 
                      01625     ;  Delay state simply waits the specified ms then goes to next state.
                      01626 
01B8                  01627 led_write_state_delay
                      01628 
01B8   3001           01629     movlw   1
01B9   02B2           01630     subwf   led_write_delayl
01BA   3000           01631     movlw   0
01BB   3BB3           01632     subwfb  led_write_delayh
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BC   1803           01633     btfsc   STATUS,C
01BD   2???           01634     goto    led_write_tick_return
                      01635 
01BE   3096           01636     movlw   .150
01BF   00B2           01637     movwf   led_write_delayl
01C0   01B1           01638     clrf    led_write_state
01C1   1531           01639     bsf     led_write_state,LED_WRITE_STATE_DELAY2
01C2   01B6           01640     clrf    led_intensity
01C3   01B7           01641     clrf    led_intensity+1
01C4   01B8           01642     clrf    led_intensity+2
01C5   2???           01643     goto    led_write_tick_return
                      01644 
                      01645     ; Delay with led off.
                      01646 
01C6                  01647 led_write_state_delay2
                      01648 
01C6   0BB2           01649     decfsz  led_write_delayl
01C7   2???           01650     goto    led_write_tick_return
                      01651 
01C8   0834           01652     movfw   led_write_next
01C9   00B1           01653     movwf   led_write_state
01CA   2???           01654     goto    led_write_tick_return
                      01655 
                      01656     ;  Write the next bit.
                      01657 
01CB                  01658 led_write_state_bit
                      01659 
01CB   01B6           01660     clrf    led_intensity
01CC   01B7           01661     clrf    led_intensity+1
01CD   01B8           01662     clrf    led_intensity+2
01CE   0830           01663     movfw   led_write_value
01CF   0535           01664     andwf   led_write_mask,W
01D0   1D03           01665     btfss   STATUS,Z
01D1   2???           01666     goto    led_write_state_bit_on
                      01667 
01D2                  01668 led_write_state_bit_off
01D2   3002           01669     movlw   0x02
01D3   00B6           01670     movwf   led_intensity
01D4   2???           01671     goto    led_write_state_bit_next
                      01672 
01D5                  01673 led_write_state_bit_on
01D5   300F           01674     movlw   0x0f
01D6   00B6           01675     movwf   led_intensity
01D7   2???           01676     goto    led_write_state_bit_next
                      01677 
01D8                  01678 led_write_state_bit_next
01D8   3003           01679     movlw   0x03
01D9   00B3           01680     movwf   led_write_delayh
01DA   01B2           01681     clrf    led_write_delayl
01DB   01B4           01682     clrf    led_write_next
01DC   1634           01683     bsf     led_write_next,LED_WRITE_STATE_END
01DD   01B1           01684     clrf    led_write_state
01DE   14B1           01685     bsf     led_write_state,LED_WRITE_STATE_DELAY
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01DF   2???           01686     goto    led_write_tick_return
                      01687 
01E0                  01688 led_write_state_end
01E0   1003           01689     bcf     STATUS,C
01E1   0CB5           01690     rrf     led_write_mask
01E2   1C03           01691     btfss   STATUS,C
01E3   2???           01692     goto    led_write_state_end_next
                      01693 
01E4   01B1           01694     clrf    led_write_state
01E5   1431           01695     bsf   led_write_state,LED_WRITE_STATE_START
01E6   2???           01696     goto    led_write_tick_return
                      01697 
01E7                  01698 led_write_state_end_next
01E7   01B1           01699     clrf    led_write_state
01E8   15B1           01700     bsf     led_write_state,LED_WRITE_STATE_BIT
01E9   2???           01701     goto    led_write_tick_return
                      01702 
01EA                  01703 led_write_tick_return
                      01704 
01EA   0008           01705     return              ; Return to the caller.
                      01706 
                      01707 
                      01708 ;  LED Module : END
                      01709 ;
                      01710 ; ------------------------------------------------------------------------------
                      01711 
                      01712 
                      01713 ; ------------------------------------------------------------------------------
                      01714 ;
                      01715 ;  Start up the main program.  Call the initialization routines for each of the
                      01716 ;  modules.
                      01717 
01EB                  01718 main
                      01719 
                      01720    ; Set the clock to 16Mhz.
01EB   0021           01721     banksel OSCCON
01EC   307A           01722     movlw   0x7a
                      01723 
01ED   0021           01724     banksel OPTION_REG
01EE   1295           01725     BCF OPTION_REG, TMR0CS
01EF   1395           01726     bcf     OPTION_REG,NOT_WPUEN
                      01727 
01F0   0023           01728     banksel ANSELC
01F1   018E           01729     clrf ANSELC
                      01730 
01F2   0023           01731     banksel ANSELA
01F3   018C           01732     clrf    ANSELA
                      01733 
01F4   2???           01734     call    system_init     ;  Initialize system.
01F5   2???           01735     call    timer_init      ;  Initialize timer.
01F6   2???           01736     call    encoder_init    ;  Initialize encoder.
01F7   2???           01737     call    led_init        ;  Initialize led.
01F8   2???           01738     call    button_init     ;  Initialize button.
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F9   2???           01739     call    i2c_init        ;  Initialize serial bus.
                      01740 
                      01741         ;  Enable interrupts.
01FA   0020           01742     banksel INTCON
01FB   170B           01743     bsf     INTCON,PEIE     ; Enable peripheral interrupts.
01FC   178B           01744     bsf     INTCON,GIE      ; Enable global interrupts.
                      01745 
                      01746     ;  Test led write.
01FD   30AC           01747     movlw  0xac
01FE   2???           01748     call    led_write
                      01749 
                      01750     ifdef   master
                      01751     clrf    button
                      01752     clrf    time
                      01753     endif
                      01754 
                      01755     ifndef  master
01FF   2???           01756     call    led_write_off
0200   01B6           01757     clrf    led_intensity
0201   01B7           01758     clrf    led_intensity+1
0202   01B8           01759     clrf    led_intensity+2
                      01760     endif
                      01761 
0203   2???           01762     goto    main_loop
                      01763 
                      01764 
                      01765     ;  Run the ms tick code.
                      01766 
0204                  01767 main_loop
                      01768 
0204   0020           01769     banksel mstimertick
0205   1C2A           01770     btfss   mstimertick,0
0206   2???           01771     goto    main_code
                      01772 
0207   2???           01773     call    encoder_tick
0208   2???           01774     call    led_tick
0209   2???           01775     call    button_tick
020A   2???           01776     call    led_write_tick
                      01777 
020B   0020           01778     banksel mstimertick
020C   102A           01779     bcf     mstimertick,0
                      01780 
                      01781     ifndef  master
020D                  01782 main_code
020D   2???           01783     goto    main_loop
                      01784     endif
                      01785 
                      01786 ; for master testing, every time that a button is pressed, send a byte to
                      01787 ; the slave.
                      01788     ifdef   master
                      01789     cblock
                      01790         button
                      01791         time
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01792         led1
                      01793         led2
                      01794         led3
                      01795     endc
                      01796 main_code
                      01797 
                      01798     banksel time
                      01799     movfw   time
                      01800     btfsc   STATUS,Z
                      01801     goto    check_button
                      01802 
                      01803     ; See if we are done sending the packet.
                      01804     btfss   i2c_state,I2C_STATE_READY
                      01805     goto    check_button
                      01806 
                      01807     ; we are done with the packet.  Display the time.
                      01808     banksel TMR1H
                      01809     subwf   TMR1H,W
                      01810     call    led_write
                      01811     banksel time
                      01812     clrf    time
                      01813 
                      01814 check_button
                      01815     banksel button
                      01816     btfss   button_state,BUTTON_STATE_PRESSED
                      01817     goto    main_not_pressed
                      01818 
                      01819     movfw   button
                      01820     btfss   STATUS,Z
                      01821     goto    main_loop
                      01822 
                      01823     bsf     button,0
                      01824     goto    send_packet
                      01825 
                      01826 main_not_pressed
                      01827     clrf    button
                      01828     goto    main_loop
                      01829 
                      01830 send_packet
                      01831 
                      01832     ;  Test i2c reserve
                      01833     call    i2c_queue_reserve
                      01834     btfss   STATUS,C
                      01835     goto    q_res_ok
                      01836 
                      01837 q_res_not_ok
                      01838     movlw   0x90
                      01839     call    led_write
                      01840     goto    main_loop
                      01841 
                      01842 q_res_ok
                      01843     movlw   0x40
                      01844     call    led_write
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01845 
                      01846     banksel led1
                      01847     ;  shift led's
                      01848     movfw   led2
                      01849     movwf   led3
                      01850     movfw   led1
                      01851     movwf   led2
                      01852     movfw   mstimerl
                      01853     movwf   led1
                      01854 
                      01855 
                      01856     ; Write the address and a data value.
                      01857     banksel i2c_queue
                      01858     movlw   0x20
                      01859     call    i2c_queue_write     ; Address
                      01860     movlw   0x13                ; Type 1 (Set LEDs), Length 3
                      01861     call    i2c_queue_write     ; Packet Type / Length
                      01862     movlw   0x00                ; Red @ 8
                      01863     movfw   led1
                      01864     call    i2c_queue_write
                      01865     movlw   0x00
                      01866     movfw   led2              ; Green @ 8
                      01867     call    i2c_queue_write
                      01868     movlw   0x00                ; Blue @ 0
                      01869     movfw   led3
                      01870     call    i2c_queue_write
                      01871 
                      01872     movlw   0x41
                      01873     call    led_write
                      01874 
                      01875     ; Release the queue.
                      01876     movlw   0x42
                      01877     call    led_write
                      01878     banksel TMR1H
                      01879     movfw   TMR1H
                      01880     banksel time
                      01881     movwf   time
                      01882     call    i2c_queue_release
                      01883     goto    main_loop
                      01884 
                      01885     endif
                      01886 
                      01887 
                      01888 ;    goto    test_leds
                      01889 ;    goto    test_button
                      01890 ;    goto    test_encoder
020E   2???           01891     goto     test_leds
020F   2???           01892     goto    test_i2c_master
                      01893 
                      01894 ; Set the leds to some test values.
0210                  01895 test_leds
0210   0020           01896     banksel led_intensity
0211   309F           01897     movlw   0x9f
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0212   00B6           01898     movwf   led_intensity
0213   30D8           01899     movlw   0xd8
0214   00B7           01900     movwf   led_intensity+1
0215   3000           01901     movlw   0x00
0216   00B8           01902     movwf   led_intensity+2
0217   2???           01903     goto    main_loop
                      01904 
                      01905 ; Set the leds to some test values.
0218                  01906 test_led2
0218   0020           01907     banksel led_intensity
0219   309F           01908     movlw   0x9f
021A   00B6           01909     movwf   led_intensity
021B   3000           01910     movlw   0x00
021C   00B7           01911     movwf   led_intensity+1
021D   30D8           01912     movlw   0xd8
021E   00B8           01913     movwf   led_intensity+2
021F   2???           01914     goto    loop
                      01915 
0220                  01916 loop
0220   2???           01917     goto    loop
                      01918 
                      01919 
                      01920 ; Test the button.
0221                  01921 test_button
                      01922 
0221   1D26           01923     btfss   button_state,BUTTON_STATE_PRESSED
0222   2???           01924     goto    button_not_pushed
                      01925 
0223   300F           01926     movlw   0x0f
0224   00B6           01927     movwf   led_intensity
0225   2???           01928     goto    test_button
                      01929 
0226                  01930 button_not_pushed
                      01931 
0226   3000           01932     movlw   0x00
0227   00B6           01933     movwf   led_intensity
0228   2???           01934     goto    test_button
                      01935 
                      01936 ; Test encoder
0229                  01937 test_encoder
0229   0020           01938     banksel encoder_position
022A   0822           01939     movfw   encoder_position
022B   00B6           01940     movwf   led_intensity
022C   2???           01941     goto    test_encoder
                      01942 
022D                  01943 test_i2c_master
022D   0024           01944     banksel SSP1CON2
022E   1416           01945     bsf     SSP1CON2,SEN
022F   0020           01946     banksel led_intensity
0230   3002           01947     movlw   0x02
0231   00B6           01948     movwf   led_intensity
                      01949 
0232   2???           01950     call    wait2
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01951 
0233   0020           01952     banksel led_intensity
0234   3088           01953     movlw   0x88
0235   00B6           01954     movwf   led_intensity
                      01955 
0236   2???           01956     call    write
0237   2???           01957     call    wait2
0238   2???           01958     call    write
0239   2???           01959     call    wait2
                      01960 
023A   2???           01961     call    stop
023B   2???           01962     call    wait2
                      01963 
                      01964 ;    banksel SSP1CON1
                      01965  ;   bcf     SSP1CON1,SSPEN
                      01966 
023C   2???           01967     goto    loop
                      01968 
023D                  01969 stop
023D   0024           01970     banksel SSP1CON2
023E   1516           01971     bsf     SSP1CON2,PEN
023F   0020           01972     banksel led_intensity
0240   01B6           01973     clrf    led_intensity
0241   01B8           01974     clrf    led_intensity+2
0242   3088           01975     movlw   0x88
0243   00B7           01976     movwf   led_intensity+1
                      01977 
0244   0008           01978     return
                      01979 
0245                  01980 write
0245   0024           01981     banksel SSP1BUF
0246   30D2           01982     movlw   0xD2
0247   0091           01983     movwf   SSP1BUF
0248   0020           01984     banksel led_intensity
0249   01B6           01985     clrf    led_intensity
024A   01B8           01986     clrf    led_intensity+2
024B   3008           01987     movlw   0x08
024C   00B7           01988     movwf   led_intensity+1
                      01989 
024D   0008           01990     return
                      01991 
                      01992 
                      01993 ; wait
                      01994 
024E                  01995 wait2
024E   0024           01996     banksel SSP1CON2
024F   1816           01997     btfsc   SSP1CON2,SEN
0250   2???           01998     goto    wait2
0251   0020           01999     banksel led_intensity
0252   01B6           02000     clrf    led_intensity
                      02001 
0253   3002           02002     movlw   0x02
0254   00B8           02003     movwf   led_intensity+2
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02004 
0255   0020           02005     banksel PIR1
0256   1191           02006     bcf     PIR1,SSP1IF
                      02007 
0257   0008           02008     return
                      02009 
                      02010 
                      02011 ; Routine - tick_list : This is a list of all the routines that need to be
                      02012 ; called on 1ms boundaries.
                      02013 
0258                  02014 tick_list
                      02015 
0258   2???           02016     call    encoder_tick
0259   2???           02017     call    led_tick
025A   2???           02018     call    button_tick
025B   0008           02019     return
                      02020 
                      02021 ; End of main program.
                      02022 ;
                      02023 ; ------------------------------------------------------------------------------
                      02024 
08E0 0803             02025         end
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACKTIM                            00000007
ADCON0                            0000009D
ADCON1                            0000009E
ADCON2                            0000009F
ADFM                              00000007
ADFVR0                            00000000
ADFVR1                            00000001
ADGO                              00000001
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADPREF0                           00000000
ADPREF1                           00000001
ADRES                             0000009B
ADRESH                            0000009C
ADRESL                            0000009B
AHEN                              00000001
ANSA0                             00000000
ANSA1                             00000001
ANSA2                             00000002
ANSA4                             00000004
ANSC0                             00000000
ANSC1                             00000001
ANSC2                             00000002
ANSC3                             00000003
ANSELA                            0000018C
ANSELC                            0000018E
APFCON                            0000011D
BCL1IE                            00000003
BCL1IF                            00000003
BF                                00000000
BOEN                              00000004
BORCON                            00000116
BORFS                             00000006
BORRDY                            00000000
BSR                               00000008
BSR0                              00000000
BSR1                              00000001
BSR2                              00000002
BSR3                              00000003
BSR4                              00000004
BSR_ICDSHAD                       00000FE3
BSR_SHAD                          00000FE6
BUTTON_BIT                        00000002
BUTTON_STATE_IDLE                 00000000
BUTTON_STATE_PRESSED              00000002
BUTTON_STATE_WAIT_PRESSED         00000001
BUTTON_STATE_WAIT_RELEASED        00000003
C                                 00000000
C1HYS                             00000001
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

C1IE                              00000005
C1IF                              00000005
C1INTN                            00000006
C1INTP                            00000007
C1NCH0                            00000000
C1NCH1                            00000001
C1NCH2                            00000002
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1PCH0                            00000004
C1PCH1                            00000005
C1POL                             00000004
C1SP                              00000002
C1SYNC                            00000000
C2HYS                             00000001
C2IE                              00000006
C2IF                              00000006
C2INTN                            00000006
C2INTP                            00000007
C2NCH0                            00000000
C2NCH1                            00000001
C2NCH2                            00000002
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2PCH0                            00000004
C2PCH1                            00000005
C2POL                             00000004
C2SP                              00000002
C2SYNC                            00000000
CDAFVR0                           00000002
CDAFVR1                           00000003
CFGS                              00000006
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CHS4                              00000006
CKE                               00000006
CKP                               00000004
CLC1CON                           00000F10
CLC1GLS0                          00000F14
CLC1GLS1                          00000F15
CLC1GLS2                          00000F16
CLC1GLS3                          00000F17
CLC1IE                            00000000
CLC1IF                            00000000
CLC1POL                           00000F11
CLC1SEL                           00000001
CLC1SEL0                          00000F12
CLC1SEL1                          00000F13
CLC2CON                           00000F18
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

CLC2GLS0                          00000F1C
CLC2GLS1                          00000F1D
CLC2GLS2                          00000F1E
CLC2GLS3                          00000F1F
CLC2IE                            00000001
CLC2IF                            00000001
CLC2POL                           00000F19
CLC2SEL0                          00000F1A
CLC2SEL1                          00000F1B
CLCDATA                           00000F0F
CM1CON0                           00000111
CM1CON1                           00000112
CM2CON0                           00000113
CM2CON1                           00000114
CMOUT                             00000115
CWG1CON0                          00000693
CWG1CON1                          00000694
CWG1CON2                          00000695
CWG1DBF                           00000692
CWG1DBF0                          00000000
CWG1DBF1                          00000001
CWG1DBF2                          00000002
CWG1DBF3                          00000003
CWG1DBF4                          00000004
CWG1DBF5                          00000005
CWG1DBR                           00000691
CWG1DBR0                          00000000
CWG1DBR1                          00000001
CWG1DBR2                          00000002
CWG1DBR3                          00000003
CWG1DBR4                          00000004
CWG1DBR5                          00000005
C_SHAD                            00000000
D1N                               00000000
D1S0                              00000000
D1S1                              00000001
D1S2                              00000002
D1T                               00000001
D2N                               00000002
D2S0                              00000004
D2S1                              00000005
D2S2                              00000006
D2T                               00000003
D3N                               00000004
D3S0                              00000000
D3S1                              00000001
D3S2                              00000002
D3T                               00000005
D4N                               00000006
D4S0                              00000004
D4S1                              00000005
D4S2                              00000006
D4T                               00000007
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

DACCON0                           00000118
DACCON1                           00000119
DACEN                             00000007
DACOE1                            00000005
DACOE2                            00000004
DACPSS                            00000002
DACR0                             00000000
DACR1                             00000001
DACR2                             00000002
DACR3                             00000003
DACR4                             00000004
DC                                00000001
DC_SHAD                           00000001
DEVICE_ADDRESS                    00000000
DEVICE_TYPE_BUTTONS               00000001
DEVICE_VERSION_MAJOR              00000000
DEVICE_VERSION_MINOR              00000000
DHEN                              00000000
D_NOT_A                           00000005
ENCODER_A_BIT                     00000004
ENCODER_B_BIT                     00000005
ENCODER_DIR_CCW                   00000001
ENCODER_DIR_CW                    00000000
ENCODER_STATE_CCW                 00000002
ENCODER_STATE_CW                  00000001
ENCODER_STATE_IDLE                00000000
ENCODER_STATE_WAIT                00000003
F                                 00000001
FREE                              00000004
FSR0                              00000004
FSR0H                             00000005
FSR0H_SHAD                        00000FE9
FSR0L                             00000004
FSR0L_SHAD                        00000FE8
FSR1                              00000006
FSR1H                             00000007
FSR1H_SHAD                        00000FEB
FSR1L                             00000006
FSR1L_SHAD                        00000FEA
FVRCON                            00000117
FVREN                             00000007
FVRRDY                            00000006
G1ARSEN                           00000006
G1ASDLA0                          00000004
G1ASDLA1                          00000005
G1ASDLB0                          00000006
G1ASDLB1                          00000007
G1ASDSC1                          00000002
G1ASDSC2                          00000003
G1ASDSCLC2                        00000000
G1ASDSFLT                         00000001
G1ASE                             00000007
G1CS0                             00000000
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

G1EN                              00000007
G1IS0                             00000000
G1IS1                             00000001
G1IS2                             00000002
G1OEA                             00000005
G1OEB                             00000006
G1POL                             00000000
G1POLA                            00000003
G1POLB                            00000004
G2POL                             00000001
G3POL                             00000002
G4D1N                             00000000
G4D1T                             00000001
G4D2N                             00000002
G4D2T                             00000003
G4D3N                             00000004
G4D3T                             00000005
G4D4N                             00000006
G4D4T                             00000007
G4POL                             00000003
GCEN                              00000007
GIE                               00000007
GO                                00000001
GO_NOT_DONE                       00000001
HFIOFR                            00000004
HFIOFS                            00000000
I2C_ADDRESS                       00000010
I2C_CLOCK_BIT                     00000000
I2C_DATA_BIT                      00000001
I2C_STATE_ADDRESS                 00000001
I2C_STATE_ENCODER                 00000005
I2C_STATE_LED                     00000003
I2C_STATE_START                   00000000
I2C_STATE_STOP                    00000004
I2C_STATE_TYPE                    00000002
INDF0                             00000000
INDF1                             00000001
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOCAF                             00000393
IOCAF0                            00000000
IOCAF1                            00000001
IOCAF2                            00000002
IOCAF3                            00000003
IOCAF4                            00000004
IOCAF5                            00000005
IOCAN                             00000392
IOCAN0                            00000000
IOCAN1                            00000001
IOCAN2                            00000002
IOCAN3                            00000003
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

IOCAN4                            00000004
IOCAN5                            00000005
IOCAP                             00000391
IOCAP0                            00000000
IOCAP1                            00000001
IOCAP2                            00000002
IOCAP3                            00000003
IOCAP4                            00000004
IOCAP5                            00000005
IOCIE                             00000003
IOCIF                             00000000
IRCF0                             00000003
IRCF1                             00000004
IRCF2                             00000005
IRCF3                             00000006
LATA                              0000010C
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA4                             00000004
LATA5                             00000005
LATC                              0000010E
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LC1D1S0                           00000000
LC1D1S1                           00000001
LC1D1S2                           00000002
LC1D2S0                           00000004
LC1D2S1                           00000005
LC1D2S2                           00000006
LC1D3S0                           00000000
LC1D3S1                           00000001
LC1D3S2                           00000002
LC1D4S0                           00000004
LC1D4S1                           00000005
LC1D4S2                           00000006
LC1EN                             00000007
LC1G1D1N                          00000000
LC1G1D1T                          00000001
LC1G1D2N                          00000002
LC1G1D2T                          00000003
LC1G1D3N                          00000004
LC1G1D3T                          00000005
LC1G1D4N                          00000006
LC1G1D4T                          00000007
LC1G1POL                          00000000
LC1G2D1N                          00000000
LC1G2D1T                          00000001
LC1G2D2N                          00000002
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

LC1G2D2T                          00000003
LC1G2D3N                          00000004
LC1G2D3T                          00000005
LC1G2D4N                          00000006
LC1G2D4T                          00000007
LC1G2POL                          00000001
LC1G3D1N                          00000000
LC1G3D1T                          00000001
LC1G3D2N                          00000002
LC1G3D2T                          00000003
LC1G3D3N                          00000004
LC1G3D3T                          00000005
LC1G3D4N                          00000006
LC1G3D4T                          00000007
LC1G3POL                          00000002
LC1G4D1N                          00000000
LC1G4D1T                          00000001
LC1G4D2N                          00000002
LC1G4D2T                          00000003
LC1G4D3N                          00000004
LC1G4D3T                          00000005
LC1G4D4N                          00000006
LC1G4D4T                          00000007
LC1G4POL                          00000003
LC1INTN                           00000003
LC1INTP                           00000004
LC1MODE0                          00000000
LC1MODE1                          00000001
LC1MODE2                          00000002
LC1OE                             00000006
LC1OUT                            00000005
LC1POL                            00000007
LC2D1S0                           00000000
LC2D1S1                           00000001
LC2D1S2                           00000002
LC2D2S0                           00000004
LC2D2S1                           00000005
LC2D2S2                           00000006
LC2D3S0                           00000000
LC2D3S1                           00000001
LC2D3S2                           00000002
LC2D4S0                           00000004
LC2D4S1                           00000005
LC2D4S2                           00000006
LC2EN                             00000007
LC2G1D1N                          00000000
LC2G1D1T                          00000001
LC2G1D2N                          00000002
LC2G1D2T                          00000003
LC2G1D3N                          00000004
LC2G1D3T                          00000005
LC2G1D4N                          00000006
LC2G1D4T                          00000007
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

LC2G1POL                          00000000
LC2G2D1N                          00000000
LC2G2D1T                          00000001
LC2G2D2N                          00000002
LC2G2D2T                          00000003
LC2G2D3N                          00000004
LC2G2D3T                          00000005
LC2G2D4N                          00000006
LC2G2D4T                          00000007
LC2G2POL                          00000001
LC2G3D1N                          00000000
LC2G3D1T                          00000001
LC2G3D2N                          00000002
LC2G3D2T                          00000003
LC2G3D3N                          00000004
LC2G3D3T                          00000005
LC2G3D4N                          00000006
LC2G3D4T                          00000007
LC2G3POL                          00000002
LC2G4D1N                          00000000
LC2G4D1T                          00000001
LC2G4D2N                          00000002
LC2G4D2T                          00000003
LC2G4D3N                          00000004
LC2G4D3T                          00000005
LC2G4D4N                          00000006
LC2G4D4T                          00000007
LC2G4POL                          00000003
LC2INTN                           00000003
LC2INTP                           00000004
LC2MODE0                          00000000
LC2MODE1                          00000001
LC2MODE2                          00000002
LC2OE                             00000006
LC2OUT                            00000005
LC2POL                            00000007
LCEN                              00000007
LCINTN                            00000003
LCINTP                            00000004
LCMODE0                           00000000
LCMODE1                           00000001
LCMODE2                           00000002
LCOE                              00000006
LCOUT                             00000005
LED_B_BIT                         00000005
LED_G_BIT                         00000004
LED_R_BIT                         00000003
LED_WRITE_STATE_BIT               00000003
LED_WRITE_STATE_DELAY             00000001
LED_WRITE_STATE_DELAY2            00000002
LED_WRITE_STATE_END               00000004
LED_WRITE_STATE_START             00000000
LFIOFR                            00000001
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

LWLO                              00000005
MC1OUT                            00000000
MC2OUT                            00000001
MCLC1OUT                          00000000
MCLC2OUT                          00000001
N1CKS0                            00000000
N1CKS1                            00000001
N1EN                              00000007
N1OE                              00000006
N1OUT                             00000005
N1PFM                             00000000
N1POL                             00000004
N1PWS0                            00000005
N1PWS1                            00000006
N1PWS2                            00000007
NCO1ACC                           00000498
NCO1ACC0                          00000000
NCO1ACC1                          00000001
NCO1ACC10                         00000002
NCO1ACC11                         00000003
NCO1ACC12                         00000004
NCO1ACC13                         00000005
NCO1ACC14                         00000006
NCO1ACC15                         00000007
NCO1ACC16                         00000000
NCO1ACC17                         00000001
NCO1ACC18                         00000002
NCO1ACC19                         00000003
NCO1ACC2                          00000002
NCO1ACC3                          00000003
NCO1ACC4                          00000004
NCO1ACC5                          00000005
NCO1ACC6                          00000006
NCO1ACC7                          00000007
NCO1ACC8                          00000000
NCO1ACC9                          00000001
NCO1ACCH                          00000499
NCO1ACCL                          00000498
NCO1ACCU                          0000049A
NCO1CLK                           0000049F
NCO1CON                           0000049E
NCO1IE                            00000002
NCO1IF                            00000002
NCO1INC                           0000049B
NCO1INC0                          00000000
NCO1INC1                          00000001
NCO1INC10                         00000002
NCO1INC11                         00000003
NCO1INC12                         00000004
NCO1INC13                         00000005
NCO1INC14                         00000006
NCO1INC15                         00000007
NCO1INC2                          00000002
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

NCO1INC3                          00000003
NCO1INC4                          00000004
NCO1INC5                          00000005
NCO1INC6                          00000006
NCO1INC7                          00000007
NCO1INC8                          00000000
NCO1INC9                          00000001
NCO1INCH                          0000049C
NCO1INCL                          0000049B
NCO1INCU                          0000049D
NCO1SEL                           00000000
NOT_BOR                           00000000
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RI                            00000002
NOT_RMCLR                         00000003
NOT_RWDT                          00000004
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_WPUEN                         00000007
OPTION_REG                        00000095
OSCCON                            00000099
OSCSTAT                           0000009A
P                                 00000004
PCIE                              00000006
PCL                               00000002
PCLATH                            0000000A
PCLATH_SHAD                       00000FE7
PCON                              00000096
PEIE                              00000006
PEN                               00000002
PIE1                              00000091
PIE2                              00000092
PIE3                              00000093
PIR1                              00000011
PIR2                              00000012
PIR3                              00000013
PMADR                             00000191
PMADRH                            00000192
PMADRL                            00000191
PMCON1                            00000195
PMCON2                            00000196
PMDAT                             00000193
PMDATH                            00000194
PMDATL                            00000193
POL                               00000007
PORTA                             0000000C
PORTC                             0000000E
PR2                               0000001B
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

PWM1CON                           00000613
PWM1CON0                          00000613
PWM1DCH                           00000612
PWM1DCH0                          00000000
PWM1DCH1                          00000001
PWM1DCH2                          00000002
PWM1DCH3                          00000003
PWM1DCH4                          00000004
PWM1DCH5                          00000005
PWM1DCH6                          00000006
PWM1DCH7                          00000007
PWM1DCL                           00000611
PWM1DCL0                          00000006
PWM1DCL1                          00000007
PWM1EN                            00000007
PWM1OE                            00000006
PWM1OUT                           00000005
PWM1POL                           00000004
PWM2CON                           00000616
PWM2CON0                          00000616
PWM2DCH                           00000615
PWM2DCH0                          00000000
PWM2DCH1                          00000001
PWM2DCH2                          00000002
PWM2DCH3                          00000003
PWM2DCH4                          00000004
PWM2DCH5                          00000005
PWM2DCH6                          00000006
PWM2DCH7                          00000007
PWM2DCL                           00000614
PWM2DCL0                          00000006
PWM2DCL1                          00000007
PWM2EN                            00000007
PWM2OE                            00000006
PWM2OUT                           00000005
PWM2POL                           00000004
PWM3CON                           00000619
PWM3CON0                          00000619
PWM3DCH                           00000618
PWM3DCH0                          00000000
PWM3DCH1                          00000001
PWM3DCH2                          00000002
PWM3DCH3                          00000003
PWM3DCH4                          00000004
PWM3DCH5                          00000005
PWM3DCH6                          00000006
PWM3DCH7                          00000007
PWM3DCL                           00000617
PWM3DCL0                          00000006
PWM3DCL1                          00000007
PWM3EN                            00000007
PWM3OE                            00000006
PWM3OUT                           00000005
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

PWM3POL                           00000004
PWM4CON                           0000061C
PWM4CON0                          0000061C
PWM4DCH                           0000061B
PWM4DCH0                          00000000
PWM4DCH1                          00000001
PWM4DCH2                          00000002
PWM4DCH3                          00000003
PWM4DCH4                          00000004
PWM4DCH5                          00000005
PWM4DCH6                          00000006
PWM4DCH7                          00000007
PWM4DCL                           0000061A
PWM4DCL0                          00000006
PWM4DCL1                          00000007
PWM4EN                            00000007
PWM4OE                            00000006
PWM4OUT                           00000005
PWM4POL                           00000004
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RCEN                              00000003
RD                                00000000
RSEN                              00000001
R_NOT_W                           00000002
S                                 00000003
SBCDE                             00000002
SBOREN                            00000007
SCIE                              00000005
SCS0                              00000000
SCS1                              00000001
SDAHT                             00000003
SDOSEL                            00000005
SEN                               00000000
SMP                               00000007
SSP1ADD                           00000212
SSP1BUF                           00000211
SSP1CON1                          00000215
SSP1CON2                          00000216
SSP1CON3                          00000217
SSP1IE                            00000003
SSP1IF                            00000003
SSP1MSK                           00000213
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

SSP1STAT                          00000214
SSPADD                            00000212
SSPBUF                            00000211
SSPCON                            00000215
SSPCON1                           00000215
SSPCON2                           00000216
SSPCON3                           00000217
SSPEN                             00000005
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000213
SSPOV                             00000006
SSPSTAT                           00000214
SSSEL                             00000004
STATUS                            00000003
STATUS_SHAD                       00000FE4
STKOVF                            00000007
STKPTR                            00000FED
STKUNF                            00000006
SWDTEN                            00000000
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000018
T1GCON                            00000019
T1GGO_NOT_DONE                    00000003
T1GPOL                            00000006
T1GSEL                            00000003
T1GSPM                            00000004
T1GSS0                            00000000
T1GSS1                            00000001
T1GTM                             00000005
T1GVAL                            00000002
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             0000001C
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
TMR0                              00000015
TMR0CS                            00000005
TMR0IE                            00000005
TMR0IF                            00000002
TMR0SE                            00000004
TMR1                              00000016
TMR1CS0                           00000006
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

TMR1CS1                           00000007
TMR1GE                            00000007
TMR1GIE                           00000007
TMR1GIF                           00000007
TMR1H                             00000017
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             00000016
TMR1ON                            00000000
TMR2                              0000001A
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOSH                              00000FEF
TOSL                              00000FEE
TRIGSEL0                          00000004
TRIGSEL1                          00000005
TRIGSEL2                          00000006
TRIGSEL3                          00000007
TRISA                             0000008C
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISC                             0000008E
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TSEN                              00000005
TSRNG                             00000004
UA                                00000001
VREGCON                           00000197
VREGPM                            00000001
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WDTPS4                            00000005
WPUA                              0000020C
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

WR                                00000001
WREG                              00000009
WREG_SHAD                         00000FE5
WREN                              00000002
WRERR                             00000003
Z                                 00000002
Z_SHAD                            00000002
_BOREN_NSLEEP                     0000FDFF
_BOREN_OFF                        0000F9FF
_BOREN_ON                         0000FFFF
_BOREN_SBODEN                     0000FBFF
_BORV_HI                          0000FBFF
_BORV_LO                          0000FFFF
_CLKOUTEN_OFF                     0000FFFF
_CLKOUTEN_ON                      0000F7FF
_CONFIG1                          00008007
_CONFIG2                          00008008
_CP_OFF                           0000FFFF
_CP_ON                            0000FF7F
_DEVID1                           00008006
_FOSC_ECH                         0000FFFF
_FOSC_ECL                         0000FFFD
_FOSC_ECM                         0000FFFE
_FOSC_INTOSC                      0000FFFC
_IDLOC0                           00008000
_IDLOC1                           00008001
_IDLOC2                           00008002
_IDLOC3                           00008003
_LPBOR_OFF                        0000FFFF
_LPBOR_ON                         0000F7FF
_LVP_OFF                          0000DFFF
_LVP_ON                           0000FFFF
_MCLRE_OFF                        0000FFBF
_MCLRE_ON                         0000FFFF
_PWRTE_OFF                        0000FFFF
_PWRTE_ON                         0000FFDF
_STVREN_OFF                       0000FDFF
_STVREN_ON                        0000FFFF
_WDTE_NSLEEP                      0000FFF7
_WDTE_OFF                         0000FFE7
_WDTE_ON                          0000FFFF
_WDTE_SWDTEN                      0000FFEF
_WRT_ALL                          0000FFFC
_WRT_BOOT                         0000FFFE
_WRT_HALF                         0000FFFD
_WRT_OFF                          0000FFFF
__16F1503                         00000001
button_idle                       00000106
button_init                       000000F5
button_not_pushed                 00000226
button_press_bounce               00000114
button_pressed                    00000117
button_read_complete              00000127
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

button_release_bounce             00000124
button_state                      00000026
button_tick                       000000FC
button_wait                       00000027
button_wait_pressed               0000010C
button_wait_released              0000011C
enc_ccw                           00000043
enc_ccw_check_a                   00000048
enc_cw                            00000032
enc_cw_check_b                    00000037
enc_idle                          00000028
enc_idle_check_b                  0000002D
enc_read_complete                 0000005B
enc_wait                          00000054
encoder_direction                 00000021
encoder_init                      00000013
encoder_position                  00000022
encoder_state                     00000020
encoder_tick                      0000001E
i2c_data_count                    00000024
i2c_init                          0000005C
i2c_isr                           0000007C
i2c_isr_read_buffer               000000E7
i2c_isr_read_buffer_bf_ok         000000EF
i2c_isr_return                    000000E6
i2c_packet_type                   00000025
i2c_state                         00000023
i2c_state_address                 00000094
i2c_state_encoder                 000000BD
i2c_state_led                     000000BE
i2c_state_start                   0000008A
i2c_state_start_ok                00000090
i2c_state_stop                    000000D5
i2c_state_stop_ok                 000000DA
i2c_state_type                    0000009F
i2c_state_type_encoder            000000B8
i2c_state_type_led                000000B3
i2c_state_unknown_interrupt       000000E0
led_count                         0000002B
led_flash                         0000002D
led_init                          0000014B
led_intensity                     00000036
led_loop_check                    00000187
led_set_flash                     00000180
led_set_intensity_loop            00000169
led_shift                         0000002C
led_tick                          00000158
led_tick_return                   00000191
led_tmp                           0000002E
led_value                         0000002F
led_write                         00000192
led_write_delayh                  00000033
led_write_delayl                  00000032
MPASM  5.46  /USERS/MICHAEL/DESKTOP/TACK SA M   9-4-2012  11:58:41         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

led_write_mask                    00000035
led_write_next                    00000034
led_write_off                     00000197
led_write_state                   00000031
led_write_state_bit               000001CB
led_write_state_bit_next          000001D8
led_write_state_bit_off           000001D2
led_write_state_bit_on            000001D5
led_write_state_delay             000001B8
led_write_state_delay2            000001C6
led_write_state_end               000001E0
led_write_state_end_next          000001E7
led_write_state_start             000001AA
led_write_tick                    0000019A
led_write_tick_return             000001EA
led_write_value                   00000030
loop                              00000220
main                              000001EB
main_code                         0000020D
main_loop                         00000204
me                                000000B2
me2                               000000BD
mstimerh                          00000029
mstimerl                          00000028
mstimertick                       0000002A
ram                               00000020
stop                              0000023D
system_halt                       00000012
system_init                       00000008
system_isr                        0000000F
system_isr_return                 00000011
test_button                       00000221
test_encoder                      00000229
test_i2c_master                   0000022D
test_led2                         00000218
test_leds                         00000210
tick_list                         00000258
timer_init                        00000128
timer_isr                         0000013C
timer_isr_return                  0000014A
timer_reload_high                 000000C1
timer_reload_low                  00000080
wait2                             0000024E
write                             00000245

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,    63 suppressed

